plot(ds, x)
set.seed(665544)      n <- 600      x <- cbind(runif(10, 0, 10)+rnorm(n, sd=0.2), runif(10, 0, 10)+rnorm(n,        sd=0.2))      par(bg="grey40")      ds <- dbscan(x, 0.2)    # run with showplot=1 to see how dbscan works.      dsplot(ds, x)
x2 <- matrix(0,nrow=4,ncol=2)    x2[1,] <- c(5,2)    x2[2,] <- c(8,3)    x2[3,] <- c(4,4)    x2[4,] <- c(9,9)    predict(ds, x, x2)    n <- 600    x <- cbind((1:3)+rnorm(n, sd=0.2), (1:3)+rnorm(n, sd=0.2))
x
options(digits=3)      set.seed(20000)      face <- rFace(50,dMoNo=2,dNoEy=0,p=2)      pk1 <- pamk(face,krange=1:5,criterion="asw",critout=TRUE)
str(pk1)
library(picante)
?ses.mpd
libary(picante)
library(picante)
?randomizeMatrix
ses.mpd
taxaShuffle
library(metricTester)
?expectations
?ses.mpd
?expectations
data(phylocom)
?ses.mpd
tax.test <- ses.mpd(phylocom$sample, cophenetic(phylocom$phylo),null.model="taxa.labels")
tax.test
tax.test <- ses.mpd(phylocom$sample, cophenetic(phylocom$phylo),null.model="taxa.labels", runs=10000)
tax.test
rich.test <- ses.mpd(phylocom$sample, cophenetic(phylocom$phylo),null.model="richness", runs=10000)
rich.test
rich.test <- ses.mpd(phylocom$sample, cophenetic(phylocom$phylo),null.model="frequency", runs=10000)
rich.test
sample.test <- ses.mpd(phylocom$sample, cophenetic(phylocom$phylo),null.model="sample.pool", runs=10000)
rich.test <- ses.mpd(phylocom$sample, cophenetic(phylocom$phylo),null.model="richness", runs=10000)
sample.test
rich.test
phylo.test <- ses.mpd(phylocom$sample, cophenetic(phylocom$phylo),null.model="phylogeny.pool", runs=10000)
phylo.test
tax.test
phylo.test <- ses.mpd(phylocom$sample, cophenetic(phylocom$phylo),null.model="phylogeny.pool", runs=50000)
tax.test <- ses.mpd(phylocom$sample, cophenetic(phylocom$phylo),null.model="taxa.labels", runs=50000)
phylo.test
tax.test
plot(phylo.test$mpd.rand.mean~tax.test$mpd.rand.mean)
6.6/5*1.035
(6.6/5)*1.035
88*5
35*6.6
6.682
6.6*2
13.2*35
88*5.5
9.9*35
0.12*9
346.5+46
346.5+46-484
484/35
231/5.5/44
231/35
13.2*35
13.2*36
462/4
10*1.2
12*0.8
8*1.2
0.8*1.2
1/-.8
1/.8
6.3*1.25
190.9-184.5
190.9-184.4
191.6-184.4
194-184.4
6.5+7.2+9.6
187.8-184.4
190.3-184.4
5.9+6.5+9.6
20/5
4*5.5
189.6-184.4
7.2-5.9
1.3+5.2
269+24.95+11.75
install.packages("convevol",dependencies=TRUE)
phyl<-rtree(10)    phendata<-fastBM(phyl,nsim=2)
library(convevol)
phyl<-rtree(10)    phendata<-fastBM(phyl,nsim=2)
phyl
phendata
phyl<-rtree(10)    phendata<-fastBM(phyl,nsim=4)
phendata
answer<-allmaxdist(phyl,phendata,mat=TRUE)
answer
answer<-allmaxdist(phyl,phendata,mat=F)
answer
class(answer)
calcchanges(phyl,phendata)
calcchanges
calcchanges(phyl,phendata)
test <- function (phyl, phendata) #
{#
    if (class(phyl) != "phylo") #
        stop("your tree must be class 'phylo.'")#
    if (nrow(phendata) != length(phyl$tip)) #
        stop("your data matrix must have the same number of rows as tips in the tree.")#
    if (is.null(rownames(phendata))) {#
        warning("no row names for data.  Assuming that the rows are in the same order as tips.")#
        rownames(X) <- phyl$tip.label#
    }#
    allvals <- multianc(phyl, phendata)#
    pdims <- dim(phyl$edge)#
    changes <- rep(0, pdims[1])#
    j <- 1#
    for (j in 1:pdims[1]) {#
        ancnode <- phyl$edge[j, 1]#
        desnode <- phyl$edge[j, 2]#
        ancvals <- allvals[ancnode, ]#
        desvals <- allvals[desnode, ]#
        change <- (sum((ancvals - desvals)^2))^0.5#
        changes[j] <- change#
    }#
    answer <- changes#
    answer#
}
test(phyl,phendata)
phyl<-rtree(10)    phendata<-fastBM(phyl,nsim=5)    changes<-calcchanges(phyl,phendata)
changes
phyl
phyl$edge
test<-phyl$edge
test2<-data.frame(test,changes)
test2
?multianc
phyl<-rtree(10)    phendata<-fastBM(phyl,nsim=2)    ancs<-multianc(phyl,phendata)
ancs
test2
plot(phyl)
?rtree
phendata
46+11+18+13+5+3+3+5+10+4+5+60+240+84
?pbtree
pbtree(n=19)
plot(pbtree(n=19))
tree<-plot(pbtree(n=19))
tree<-plot(pbtree(n=10))
tree<-pbtree(n=10))
tree<-pbtree(n=10)
tree
plot(tree)
phendata
calcchanges(tree,phendata)
calcchanges(tree,phendata)->temp
temp
temp[8,]
phendata[8,]
phendata[8,]<-1
phendata[8,]
phendata[9,]<-1
phendata
temp<-calcchanges(tree,phendata)
temp
temp2<-data.frame(phendata,temp)
length(temp)
multianc(tree,phendata)
multianc(tree,phendata)->temp3
temp3
tree$edge
?which.edge
labelstonumbers(tree,"t7")
labelstonumbers(tree,"t2")
labelstonumbers(tree,"t3")
str(tree)
tree$edge.length
plot(extract.clade(tree,10))
plot(extract.clade(tree,11))
library(geomorph)
?physignal
data(plethspecies)#
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
Y.gpa$coords
?phyl.cca
?redundancy
library(caper)#
library(dplyr)#
library(picante)#
library(phytools)#
library(candisc)#
library(geomorph)#
library(geiger)#
library(plotrix)#
library(simpleFDis)#
library(fpc)#
library(metricTester)#
library(convevol)
?redundancy
18927.1/750
22712.5/750
18927.1/12
640/12
128/16
4000/12
4000/3
1675*12
1600*12
1600*11
1550*12
1525*12
library(metricTester)
dispersalNull
?dispersalNull
coordDF <- matrix(ncol=2, nrow=100)#
#
coordDF[,1] <- runif(n=100, min=40, max=50)#
coordDF[,2] <- runif(n=100, min=-130, max=-120)#
#
#convert to data frame, give column names. also give row names such as if the cells had#
#names (as they should or there'd be no way to track them)#
coordDF <- as.data.frame(coordDF)#
#
row.names(coordDF) <- paste("cell", 1:100, sep="")#
#
names(coordDF) <- c("latitude","longitude")#
#
#calculate the distances among all of these points. in the real program you're going to#
#want to calculate great arc distance or whatever it's called#
distances <- dist(coordDF, diag=TRUE, upper=TRUE)#
#
#turn it into a symmetric distance matrix#
distances <- as.matrix(distances)#
#
#simulate a regional phylogeny of 100 species#
tree <- sim.bdtree(b=1, d=0, stop="taxa", n=100)#
#
#simulate a community data matrix of 100 cells by 100 species. do it 4 times so that#
#you can use your simulateComm function and have it span a reasonable range of richness#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm1 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
cdm2 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
cdm3 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
cdm4 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
#
#bind these into a list and use dplyr rbind_all to bind together. recast as data frame#
#
cdmList <- list(cdm1, cdm2, cdm3, cdm4)#
#
cdm <- rbind_all(cdmList)#
#
cdm <- as.data.frame(cdm)#
#
#fix as necessary manually here (i.e. make sure dimensions are 100 x 100), seems to#
#usually work. then give cell names#
#
row.names(cdm) <- paste("cell", 1:100, sep="")#
#
#fill NAs with 0s.#
#
cdm[is.na(cdm)] <- 0#
#
newCDM <- dispersalNull(cdm, tree, distances)
CDM
cdm
head(cdm)
head(newCDM)
quickFun <- function(vect)#
{#
	result <- vect/max(vect)#
	result#
}#
#
CDM2 <- apply(cdm, 2, quickFun)
head(CDM2)
apply(cdm,2,mean)
temp<-apply(cdm,2,mean)
temp2<-apply(CDM2,2,mean)
plot(temp~temp2)
plot(cdm[,1]~CDM2[,1])
plot(temp~temp2)
temp2<-apply(CDM2,1,mean)
temp<-apply(cdm,1,mean)
plot(temp~temp2)
library(devtools)
load_all()
tree <- read.tree("meli4.tre")
tempCDM <- read.csv("meli_phylocom_format.csv")
CDM <- sample2matrix(tempCDM)
dispersalNull
bothDistances <- readRDS("/Users/eliotmiller/Documents/Writing and Other Work/Post-doc Work/Dispersal null/meli_bothDistances.RDS")
test <- dispersalNull(CDM, tree, bothDistances)
head(bothDistances)
head(CDM)
CDM <- CDM[row.names(CDM)%in%row.names(bothDistances),]
dim(CDM)
dim(bothDistances)
test <- dispersalNull(CDM, tree, bothDistances)
test[695,]
test <- dispersalNull(CDM, tree, bothDistances)
test[695,]
test <- dispersalNull(CDM, tree, bothDistances, abundance.matters=FALSE)
test[695,]
CDM[694,]
CDM[693,]
CDM[692,]
CDM[691,]
CDM[690,]
CDM[689,]
CDM[688,]
CDM[687,]
CDM[686,]
CDM[685,]
CDM[684,]
CDM[683,]
CDM[682,]
CDM[681,]
CDM[680,]
CDM[679,]
test <- dispersalNull(CDM, tree, bothDistances, abundance.matters=FALSE, abundance.assigned="overall")
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)
tree
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1
cdm <- simulateComm(tree, richness.vector=10:25, abundances=sim.abundances)
cdm
setdiff(names(cdm),tree$tip.label)
length(setdiff(names(cdm),tree$tip.label))
warning()
load_all()
load_all()
documents()
document()
cdm
relativeCDM(cdm)
relativeCDM(cdm, tree)
relativeCDM(t(cdm), tree)
length(setdiff(names(t(cdm)),tree$tip.label)) > 0)
length(setdiff(t(names(cdm)),tree$tip.label)) > 0)
length(setdiff(names(cdm),tree$tip.label)) > 0)
length(setdiff(names(cdm),tree$tip.label)) > 0
length(setdiff(names(t(cdm)),tree$tip.label)) > 0
setdiff(names(t(cdm)),tree$tip.label))
setdiff(names(t(cdm)),tree$tip.label)
names(t(cdm))
colnames(t(cdm))
load_all()
document()
relativeCDM(t(cdm), tree)
relativeCDM(cdm, tree)
