poss
lapply(frames, function(x) as.list(poss[x]))
lapply(frames, function(x)) poss[x]
lapply(frames, function(x) poss[x])
lapply(frames, simple)
sum(frame1)
poss <- as.list(poss)
poss
lapply(frames, simple, poss)
lapply(frames, function(x) simple(frames, poss[[x]]))
lapply(frames, function(x) simple(frames[[x]], poss[[x]]))
lapply(frames, function(x) simple(column=poss[[x]]))
lapply(frames, function(x) simple(d.frame=frames, column=poss[[x]]))
lapply(frames, function(x) simple(d.frame=frames[[x]], column=poss[[x]]))
24*60
1440*0.056
1440*0.0093
library(geiger)
?bd.ms
plot(1:10)
quartz(height=100, width=100)
quartz(height=20, width=20)
plot(1:10)
quartz(height=1, width=1)
plot(1:10)
quartz(height=3, width=3)
plot(1:10)
jpeg(filename="small.jpg", quality=10)
dev.off()
jpeg(filename="small.jpg", quality=10)
plot(1:10)
dev.off()
jpeg(filename="small.jpg", quality=100)
plot(1:10)
dev.off()
?jpeg
52365/60
872/60
6.78*500
32115.369/60
535/60
.025*14.5
.42*22
.15*22
.06*22
.04*22
.04*44
.05*44
.07*22
11*0.14
17*7
103+210
1.54*500
333+279
(302+335)/200
(302+335)/2000
Sys.time()
gsub(" ", "_", Sys.time())
72*3
171*3
library(devtools)
load_all()
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1))#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
abund <- abundanceVector(cdm)#
prepped <- prepData(tree, cdm)#
metricResults <- calcMetrics(prepped)#
theEnd <- dim(results)[2]#
prepped <- prepNulls(tree, cdm)#
nullResults <- runNulls(prepped)
str(nullResults)
length(defineNulls())
class(nullResults)
lapply(nullResults, class)
nullResults[[1]]
length(defineNulls())
lapply(nullResults, dim)
nullResults$regional
lapply(nullResults, class)
lapply(nullResults, class)==matrix
unlist(lapply(nullResults, class))==matrix
unlist(lapply(nullResults, class))
as.data.frame(lapply(nullResults, class))
as.data.frame(lapply(nullResults, class))==matrix
t(as.data.frame(lapply(nullResults, class)))==matrix
as.data.frame(lapply(nullResults, class))
as.character(as.data.frame(lapply(nullResults, class)))
as.factor(as.data.frame(lapply(nullResults, class)))
as.factor(unlist(lapply(nullResults, class)))
as.character(unlist(lapply(nullResults, class)))
as.character(unlist(lapply(nullResults, class)))=="matrix"
as.character(unlist(lapply(nullResults, class)))=="matrix"
lapply(nullResults, dim)
as.data.frame(lapply(nullResults, dim))
t(as.data.frame(lapply(nullResults, dim)))
t(as.data.frame(lapply(nullResults, dim)))[,1]
t(as.data.frame(lapply(nullResults, dim)))[,1]==16
as.data.frame(lapply(nullResults, dim))[1,]==16
devtools::test()
devtools::test()
length(tree$tip.label)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
as.character(unlist(lapply(nullResults, class)))
all.equal(as.character(unlist(lapply(nullResults, class))))
?all.equal
?any
all(as.character(unlist(lapply(nullResults, class))))
all(as.character(unlist(lapply(nullResults, class)))=="matrix")
devtools::test()
devtools::test()
as.data.frame(lapply(nullResults, dim))[1,]==noQuadrats
noQuadrats <- dim(cdm)[1]
as.data.frame(lapply(nullResults, dim))[1,]==noQuadrats
devtools::test()
devtools::test()
prepped <- prepSimulations(tree, arena.length=300, mean.log.individuals=2, #
	length.parameter=5000, sd.parameter=50, max.distance=20, proportion.killed=0.2,#
	competition.iterations=3)#
simulationResults <- runSimulations(prepped)
str(simulationResults)
names(simulationResults)
lapply(simulationResults, function(x) !is.missing(simulationResults[[x]]$arena))
lapply(simulationResults, function(x) !missing(simulationResults[[x]]$arena))
lapply(simulationResults, function(x) dim(simulationResults[[x]]$arena))
lapply(seq_along(simulationResults), function(x) dim(simulationResults[[x]]$arena))
as.data.frame(lapply(seq_along(simulationResults), function(x) dim(simulationResults[[x]]$arena)))
unlist(lapply(seq_along(simulationResults), function(x) dim(simulationResults[[x]]$arena)))
as.data.frame(lapply(seq_along(simulationResults), function(x) dim(simulationResults[[x]]$arena))) > 1
all(as.data.frame(lapply(seq_along(simulationResults), function(x) dim(simulationResults[[x]]$arena))) > 1)
devtools::test()
devtools::test()
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
rawResults <- metricsNnulls(tree, cdm, randomizations=3)
str(rawResults,2)
lapply(rawResults, length)
all(lapply(rawResults, length)==9)
all(lapply(rawResults, length)==length(defineNulls()))
rawResults[[1]][[1]]
lapply(rawResults[[1]], dim)
lapply(rawResults[[1]], dim)==c(16,21)
lapply(rawResults[[1]], dim)==matrix(nrow=1, ncol=2, c(16,21))
matrix(nrow=1, ncol=2, c(16,21))
lapply(rawResults[[1]], dim)==matrix(nrow=1, ncol=2, c(16,21))
lapply(rawResults[[1]], dim)
as.data.frame(lapply(rawResults[[1]], dim))
length(defineMetrics())
as.data.frame(lapply(rawResults[[1]], dim))
as.data.frame(lapply(rawResults[[1]], dim))[1,]
as.data.frame(lapply(rawResults[[1]], dim))[2,]
all(as.data.frame(lapply(rawResults[[1]], dim))[2,]==defineMetrics()-1)
all(as.data.frame(lapply(rawResults[[1]], dim))[2,]#
		==length(defineMetrics())-1)
length(defineMetrics())-1
length(defineMetrics())+1
all(as.data.frame(lapply(rawResults[[1]], dim))[2,]#
		==length(defineMetrics())+1)
results <- reduceRandomizations(rawResults)
dim(results)
str(results,2)
length(results)
lapply(results, dim)
unlist(lapply(results, dim))
as.data.frame(lapply(results, dim))
as.data.frame(lapply(results, dim))[2,]
all(as.data.frame(lapply(results, dim))[2,]==length(defineMetrics())+1))
all(as.data.frame(lapply(results, dim))[2,]==length(defineMetrics())+1)
observed <- observedMetrics(tree, cdm)
dim(observed)
test1 <- errorChecker(observed, results, "richness")
str(test1)
str(test1,2)
names(test1$ses) == names(defineNulls())
all(names(test1$ses) == names(defineNulls()))
length(test1)
devtools::test()
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
temp <- evolveTraits(tree)#
prepped <- prepSimulations(tree, arena.length=300, mean.log.individuals=2, #
	length.parameter=5000, sd.parameter=50, max.distance=20, proportion.killed=0.2,#
	competition.iterations=3)#
singleArena <- filteringArena(prepped)#
bounds <- quadratPlacer(no.quadrats=20, arena.length=300, quadrat.length=50)#
cdm <- quadratContents(singleArena$arena, bounds)
bounds <- quadratPlacer(no.quadrats=20, arena.length=300, quadrat.length=sqrt(1000))#
cdm <- quadratContents(singleArena$arena, bounds)
cdm
class(cdm)
apply(cdm, 1, sum)
apply(cdm, 2, sum)
devtools::test()
bounds
any(#
#the corner X1,Y1 is within the bounds of another quadrat#
bounds[i,1] > bounds[j,1] & #
bounds[i,1] < bounds[j,2] & #
bounds[i,3] > bounds[j,3] &#
bounds[i,3] < bounds[j,4],#
#the corner X2,Y1 is within the bounds of another quadrat#
bounds[i,2] > bounds[j,1] & #
bounds[i,2] < bounds[j,2] & #
bounds[i,3] > bounds[j,3] &#
bounds[i,3] < bounds[j,4],#
#the corner X1,Y2 is within the bounds of another quadrat#
bounds[i,1] > bounds[j,1] & #
bounds[i,1] < bounds[j,2] & #
bounds[i,4] > bounds[j,3] &#
bounds[i,4] < bounds[j,4],#
#the corner X2,Y2 is within the bounds of another quadrat#
bounds[i,2] > bounds[j,1] & #
bounds[i,2] < bounds[j,2] & #
bounds[i,4] > bounds[j,3] &#
bounds[i,4] < bounds[j,4]#
)
any(#
#the corner X1,Y1 is within the bounds of another quadrat#
bounds[,1] > bounds[,1] & #
bounds[,1] < bounds[,2] & #
bounds[,3] > bounds[,3] &#
bounds[,3] < bounds[,4],#
#the corner X2,Y1 is within the bounds of another quadrat#
bounds[,2] > bounds[,1] & #
bounds[,2] < bounds[,2] & #
bounds[,3] > bounds[,3] &#
bounds[,3] < bounds[,4],#
#the corner X1,Y2 is within the bounds of another quadrat#
bounds[,1] > bounds[,1] & #
bounds[,1] < bounds[,2] & #
bounds[,4] > bounds[,3] &#
bounds[,4] < bounds[,4],#
#the corner X2,Y2 is within the bounds of another quadrat#
bounds[,2] > bounds[,1] & #
bounds[,2] < bounds[,2] & #
bounds[,4] > bounds[,3] &#
bounds[,4] < bounds[,4]#
)
bounds[,1] > bounds[,1]
bounds
toCheck <- bounds[1,]
toCheck
bounds[bound != toCheck, '']
bounds[bounds != toCheck,]
bounds == toCheck
error
against
bounds[bounds != 1,]
row.names(bounds)
bounds[1,]
bounds[!1,]
bounds[!=1,]
bounds[1, drop=FALSE]
bounds[1, drop=T]
bounds[bounds != 1, 1:4]
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			error[i] <- TRUE#
		}#
	}#
}
error
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			error[i] <- TRUE#
		}#
		else#
		{#
			error[i] <- FALSE#
		}#
	}#
}
error
any(error)
bounds
bounds[2,1]
bounds[2,1] = 105
bounds[2,2]
bounds[2,2] = 136
bounds
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			error[i] <- TRUE#
		}#
		else#
		{#
			error[i] <- FALSE#
		}#
	}#
}
error
any(error)
quadratPlotter(bounds)
plot(positions$arena$X, positions$arena$Y, pch=20, cex=0.5, xlim=c(0,300), ylim=c(0,300), #
col=cols[positions$arena$individuals])
ls()
plot(singleArena$arena$X, singleArena $arena$Y, pch=20, cex=0.5, xlim=c(0,300), ylim=c(0,300))
quadratPlotter(bounds)
bounds
bounds[1,1] > bounds[1,1]
bounds[2,1] > bounds[1,1]
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		print(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4])#
		{#
			error[i] <- TRUE#
		}#
		else#
		{#
			error[i] <- FALSE#
		}#
	}#
}
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		print(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4])#
		#{#
	#		error[i] <- TRUE#
	#	}#
	#	else#
	#	{#
	#		error[i] <- FALSE#
	#	}#
	}#
}
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4])#
		{#
			error[i] <- TRUE#
		}#
		else#
		{#
			error[i] <- FALSE#
		}#
	}#
}
error
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			error[i] <- TRUE#
		}#
		else#
		{#
			error[i] <- FALSE#
		}#
	}#
}
error
?any
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			error[i] <- TRUE#
		}#
	}#
}
error
rep(FALSE, dim(bounds)[1])
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	error <- rep(FALSE, dim(bounds)[1])#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			error[i] <- TRUE#
		}#
	}#
}
error
class(error)
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			print("told you")#
		}#
		else#
		{#
			print("idiot")#
		}#
	}#
}
OK <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			OK <- FALSE#
		}#
		else#
		{#
			OK <- TRUE#
		}#
	}#
}
OK
OK <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			OK <- FALSE#
		}#
		else#
		{#
			OK <- TRUE#
		}#
	}#
}
OK
OK <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			OK[i] <- FALSE#
		}#
		else#
		{#
			OK[i] <- TRUE#
		}#
	}#
}
OK
OK <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			OK[i] <- FALSE#
		}#
	}#
}
OK
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[j,1] > bounds[i,1] &#
			bounds[j,1] < bounds[i,2] &#
			bounds[j,3] > bounds[i,3] &#
			bounds[j,3] < bounds[i,4]))#
		{#
			error[i] <- TRUE#
		}#
		else#
		{#
			error[i] <- FALSE#
		}#
	}#
}
error
error <- c()#
for(i in 1:dim(bounds)[1])#
{#
	for(j in 1:dim(bounds)[1])#
	{#
		if(any(bounds[i,1] > bounds[j,1] &#
			bounds[i,1] < bounds[j,2] &#
			bounds[i,3] > bounds[j,3] &#
			bounds[i,3] < bounds[j,4]))#
		{#
			error[i] <- TRUE#
			break;#
		}#
		else#
		{#
			error[i] <- FALSE#
		}#
	}#
}
error
if(any(error))
)
any(error)
devtools::test()
devtools::test()
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)
class(cdm)
