map <- ggmap(baseMap) + theme(plot.margin=unit(-0.5, "line""))
)
map <- ggmap(baseMap) + theme(plot.margin=unit(-0.5, "line"))
map
38.770565-38.487878
38.770565-38.487878->a
a/2
a/2->b
38.487878+b
system.time(topMap <- get_stamenmap(bbox=c(left = -90.514909, bottom = 38.62922, right = -90.135291, top = 38.770565), zoom=12, maptype="terrain"))#
#
system.time(bottomMap <- get_stamenmap(bbox=c(left = -90.514909, bottom = 38.487878, right = -90.135291, top = 38.62922), zoom=12, maptype="terrain"))
test <- map(bottomMap)
test <- ggmap(bottomMap)
test
10000/60
library(devtools)
install_github("metricTester", username="eliotmiller")
library(metricTester)
simulateComm()
install_github("ecoPDcorr", username="eliotmiller")
quit()
library(metricTester)
?simulateComm
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1))#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)
cdm
quickFUN <- function(vector)
quickFUN <- function(vector)#
{#
	totals <- sum(vector)#
	output <- vector/totals#
	return(output)#
}
quickFUN(cdm[1,])
sum(quickFUN(cdm[1,]))
test <- apply(cdm, 1, quickFUN)
test
?apply
cdm
apply(cdm, 1, quickFUN)
test
apply(test,2,sum)
test <- t(test)
test
cdm
test
dists <- cophenetic(tree)
mpd(cdm, dists)
mpd(cdm, test)
test
names(test)
names(cdm)
class(test)
class(cdm)
test <- data.frame(test)
test
names(test)
mpd(cdm, test)
mpd(cdm, dists)
mpd(test, dists)
mpd(cdm, dists, abundance.weighted=T)
mpd(test, dists, abundance.weighted=T)
cdm
test
cdm
test
library(metricTester)library(geiger)#simulate tree with birth-death processtree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#generate log-normal abundance curvesim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1))#use this log-normal abundance curve to create a community #data matrix (cdm) with 16 quadrats of species richness #between 10 and 25. cdm <- simulateComm(tree, min.rich=10, max.rich=25, 	abundances=sim.abundances)#generate a phylogenetic distance matrixdists <- cophenetic(tree)#calculate the various forms of MPD using metricTesternaw.mpd <- modified.mpd(cdm, dists, 	abundance.weighted=FALSE)inter.mpd <- modified.mpd(cdm, dists, 	abundance.weighted="interspecific")intra.mpd <- modified.mpd(cdm, dists, 	abundance.weighted="intraspecific")#calculate the various forms of Clarke and Warwick's #metricstemp.CW <- taxondive(cdm, dists)delta <- temp.CW$Ddelta.star <- temp.CW$Dstardelta.plus <- temp.CW$Dplus#Non-abundance-weighted MPD is equal to delta +. Also, call #the raw va
lues if you want to see those directlyplot(delta.plus~naw.mpd)#Interspecific abundance-weighted MPD is equal to delta *plot(delta.star~inter.mpd)#Intraspecific abundance-weighted MPD is equal to deltaplot(delta~intra.mpd)
plot(delta.plus~naw.mpd, xlab="MPD", ylab="Delta plus")
mat
mat <- matrix(nrow=2, ncol=2)
layout(mat=mat)
mat
mat <- matrix(0, ncol=2, nrow=2)
mat
layout(mat)
layout(mat=mat)
m
mat
mat <- matrix(1:4)
mat
mat <- matrix(1:4, nrow=2)
mat
layout(mat)
plot(delta.plus~naw.mpd, xlab="MPD", ylab="Delta plus")
plot(delta.star~inter.mpd, xlab="Interspecific AW MPD", ylab="Delta star")
plot(delta~intra.mpd, xlab="Intraspecific AW MPD", ylab="Delta")
locationSampler
library(ape)
data(woodmouse)
head(woodmouse)
M.K80 <- dist.dna(woodmouse,model="K80")
M.K80
M.TN93 <- dist.dna(woodmouse, model="TN93")
tr.K80 <- nj(M.K80)
tr.TN93 <- nj(M.TN93)
layout(matrix(1:2,1))
plot(tr.K80)
plot(tr.TN93)
plot(tr.K80)
quartz()
plot(tr.TN93)
head(woodmouse)
?dist.dna
ls()
M.K80
M.TN93
M.K80-M.TN93
dist.dna
test <- c("a","a","b","c")
test
unique(test)
length(unique(test))
?par
par(mar=c(0,0.1,0,0.1))
library(vegan)
data(dune)
dune
sol <- metaMDS(dune)
sol
plot(sol, type="t")
str(sol)
sol$points
sol <- metaMDS(dune, k=3)
plot(sol, type='t')
sol$points
dune
plot(sol, type='t')
plot(sol, type='p')
class(sol)
?plot.metaMDS
plot(sol, type='n')
plot(sol, type='t')
test <- dune
test
test[,4]
length(test[,4])
test[,4] <- rep(c("est1","est2","est3","est4"),5)
test
sol <- metaMDS(test)
test <- t(test)
test
class(test)
test <- data.frame(test)
test
metaMDS(test)
?sapply
require(stats); require(graphics)#
#
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))#
# compute the list mean for each list element
x
lapply(x, quantile, probs = 1:3/4)
sapply(x, quantile)
i39 <- sapply(3:9, seq) # list of vectors
i39
test <- data.frame(species=c("sp1","sp1","sp2","sp2"), value1=c(3,4,1,6), value2=c(10,11,8,14))
test
library(plyr)
dist(test[1:2,2:3])
test <- data.frame(species=c("sp1","sp1","sp1","sp2","sp2","sp2"), value1=c(3,4,5,1,6,8), value2=c(9,10,11,8,14,16))
test
test2 <- test[1:3,]
test2
dist(test2)
dist(test2[,2:3])
dist(test2[,2:3])->test3
sd(test3)
?dist
?mahalonobis
ma <- cbind(1:6, 1:3)
(S <-  var(ma))
S
mahalanobis(c(0, 0), 1:2, S)
SDs
test
dist(test)
dist(test[,2:3])
dlply(test, "species", summarise, dists=dist(c("value1","value2")))
dlply(test, "species", summarise, dists=dist)
test
x
colMeans(x)
x <- matrix(rnorm(100*3), ncol = 3)#
stopifnot(mahalanobis(x, 0, diag(ncol(x))) == rowSums(x*x))#
        ##- Here, D^2 = usual squared Euclidean distances
x
colMeans(x)
library(picante)
?rao
raoD
?raoD
?pd
?taxondive
library(metricTester)
?simulateComm
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1))#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)
psv(cdm, tree)
psv.temp <- psv(cdm, tree)
test.case <- psv.temp$PSVs * psv.temp$SR
test.case
pd(cdm, tree)
pd.temp <- pd(cdm,tree)
plot(test.case~pd.temp$PD)
pd.temp <- pd(cdm,tree, include.root=FALSE)
plot(test.case~pd.temp$PD)
allMetrics(tree, cdm)->All
All
plot(test.case)
plot(test.case~All$NAW_MPD)
plot(test.case~All$inter_MPD)
plot(test.case~All$intra_MPD)
plot(test.case~All$PD)
plot(test.case~All$Haed)
plot(test.case~All$Eaed)
plot(test.case~All$Eed)
plot(test.case~All$Hed)
plot(test.case~All$QE)
plot(test.case~All$richness)
?SimpsonsPhy
allMetrics
?simpson
ALl
All
?pd
cdm
cdm2 <- t(cdm)
?allMetricsNull
allMetricsNull
resamp.2s(cdm2)
cdm2
resamp.2s(cdm2)
b<-c(9,10)
b
paste("echidna","is","an","animal")
class(a)a<-c(5,6,7,"echidna")
a <- c(5,6,7,"echidna")#
b <- c("echidna","dog","abies")#
frame <- data.frame(a,b)#
frame#
class(frame)
rm(frame)
frame
?frame
a <- c(5,6,7,"echidna")#
b <- c("echidna","dog","abies")#
example.frame <- data.frame(a,b)#
example.frame#
class(example.frame)
a <- c(5,6,7)#
b <- c("echidna","dog","abies")#
example.frame <- data.frame(a,b)#
example.frame#
class(example.frame)
class(example.frame$a)#
class(example.frame$b)
example.frame$a
22*9
str(example.frame)
ls()
test.case
temp <- lm(test.case~test.case)
class(test.case)
pd.temp
temp <- lm(pd.temp$PD~pd.temp$SR)
plot(temp)
test <- data.frame(x=c(1,2,3),y=c(1,2,3),z=c(1,2,3))
test
names(test) <- c("one","two")
test
library("devtools")
library("roxygen2")
load_all()
document()
devtools::check()
