library(metricTester)
defineMetrics()
raoD
?outer
?raoD
tree <- sim.bdtree(stop="taxa", n=50)
?simulateComm
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)
N <- length(cdm[, 1])
N
D <- vector(length = N)
D
D[1] <- sum(tij * outer(as.vector(t(x[1, ])), as.vector(t(x[1, ]))))
tij <- cophenetic(tree)/2
D[1] <- sum(tij * outer(as.vector(t(x[1, ])), as.vector(t(x[1, ]))))
D[1] <- sum(tij * outer(as.vector(t(cdm[1, ])), as.vector(t(cdm[1, ]))))
D
t(cdm[1, ])
as.vector(t(cdm[1, ]))
raoD(cdm, tree)
sum(tij * outer(as.vector(t(cdm[1, ])), as.vector(t(cdm[1, ]))))
raOD
raoD
fix(raoD)
raoD(cdm, tree)
x <- as.matrix(cdm)
D <- vector(length = N)
D
D[k] <- sum(tij * outer(as.vector(t(x[1, ])), #
        as.vector(t(x[1, ]))))
D[1] <- sum(tij * outer(as.vector(t(x[1, ])), #
        as.vector(t(x[1, ]))))
D
?sweet
?sweep
defineMetrics()
?prepData
prepped <- prepData(tree, cdm)
calcMetrics(prepped)
calcMetrics(prepped)->temp
calcMetrics
calcMetrics(prepped)->temp
temp
plot(temp$SimpsonsPhy~temp$QE)
temp$SimpsonsPhy/temp$QE
426593.72/60
7109/24
426593.72/60/60
426593.72/60/60/24
#this is a simple R script that will ultimately make an .RDS file#
#
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)#
prefix1 <- gsub("[:]", "", prefix1)#
prefix2 <- sample(round(runif(100, 1, 100)), size=1)#
prefixBoth <- paste(prefix1, prefix2, sep="_")#
#
temp <- rnorm(100)#
#
filename <- paste(prefixBoth, ".RDS", sep="")#
#
saveRDS(temp, file=filename)
head(temp)
8*8
64*1000
64000/60
64000/24
64000/24/365
paste("a","b","C",sep="")
2660-250-200-100-130-1300-170
870-650-120-80
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)#
prefix1 <- gsub("[:]", "", prefix1)#
prefix2 <- sample(round(runif(100, 1, 100)), size=1)#
prefixBoth <- paste(prefix1, prefix2, sep="_")#
#
temp <- rnorm(100)#
#
filename <- paste(prefixBoth, ".RDS", sep="")#
#
for(i in 1:3)#
{#
	newFilename <- paste("iteration", i, filename, sep="")#
	saveRDS(temp, file=newFilename)#
}
0.1*8*50
1.5*5
1.035*3.3/2.5
1.036*3.3/2.5
5.5/2
1.036*2.75/2.5
250/35
6.6*35
231/5
230/35
0.34/10*7.5
0.1/2.7*8.5
.34*7.5
0.1*8.5
640/12
53/4
53/3
library(metricTester)#
#
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)#
prefix1 <- gsub("[:]", "", prefix1)#
prefix2 <- sample(round(runif(100, 1, 100)), size=1)#
prefixBoth <- paste(prefix1, prefix2, sep="_")#
#
system.time(multiLinker(no.taxa=100, arena.length=sqrt(100000), mean.log.individuals=3.5, #
 	length.parameter=1000, sd.parameter=40, max.distance=20, proportion.killed=0.2, #
	competition.iterations=60, no.quadrats=20, quadrat.length=sqrt(1000), #
	concat.by="both", randomizations=1000, cores=4, cluster=FALSE, iterations=1,#
	prefix=prefixBoth,#
	metrics=list("richness"=metricTester:::my_richness, "NAW_MPD"=metricTester:::naw_mpd, "inter_MPD"=metricTester:::inter_mpd, #
	"intra_MPD"=metricTester:::intra_mpd, "complete_MPD"=metricTester:::complete_mpd, "NAW_MNTD"=metricTester:::naw_mntd,#
	"AW_MNTD"=metricTester:::aw_mntd, "PSE"=metricTester:::my_pse, "PAE"=metricTester:::PAE, "IAC"=metricTester:::IAC, "Haed"=metricTester:::Haed, "Eaed"=metricTester:::Eaed,#
	"Eed"=metricTester:::Eed, "Hed"=metricTester:::Hed, "PD"=metricTester:::my_PD, "PD_Cadotte"=metricTester:::my_PD_Cadotte),#
	nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS)))
.1*16*50
20*16*0.12
library(metricTester)#
#
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)#
prefix1 <- gsub("[:]", "", prefix1)#
prefix2 <- sample(round(runif(100, 1, 100)), size=1)#
prefixBoth <- paste(prefix1, prefix2, sep="_")
?metricsNnulls
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm, randomizations=3, cores=20, cluster=FALSE)
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm, randomizations=3, cores=1, cluster=FALSE)
50*0.7*16
50*0.07*16
50*0.2*16
50*0.08*20
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL,#
		cores=1, cluster=TRUE, randomizations=randomizations, metrics=NULL, nulls=NULL)
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL,#
		cores=1, cluster=TRUE, randomizations=randomizations, metrics=NULL, nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS))
dim(cdm)
lat <- rnorm(50)
long <- rnorm(50)
temp <- data.frame(lat,long)
dists <- dist(temp)
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL, distances.among=dists,#
		cores=1, cluster=TRUE, randomizations=randomizations, metrics=NULL, nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS))
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL, distances.among=dists,#
		cores=1, cluster=TRUE, randomizations=3, metrics=NULL, nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS))
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL, distances.among=dists,#
		cores=16, cluster=TRUE, randomizations=3, metrics=NULL, nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS))
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL, distances.among=dists,#
		cores=100, cluster=TRUE, randomizations=3, metrics=NULL, nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS))
ls()
50*0.07*32
50*0.07*20
50*0.12*14
50*0.065*32
50*0.065*20
library(metricTester)
ply
plyr
?fitContinuousMCMC
library(geiger)
?fitContinuousMCMC
install.packages("geiger")
library(geiger)
?fitContinuousMCMC
library(geiger)
?fitContinuousMCMC
library(devtools)
load_all()
ses.null1 <- matrix(nrow=10, ncol=4)#
#
ses.null1 <- as.data.frame(ses.null1)#
#
ses.null1[,1] <- 10:19#
ses.null1[,2] <- rnorm(n=10, mean=0, sd=1)#
ses.null1[,3] <- rnorm(n=10, mean=5, sd=1)#
ses.null1[,4] <- rnorm(n=10, mean=-5, sd=1)#
#
names(ses.null1) <- c("richness","metric1","metric2","metric3")#
#
quadrat.null1 <- ses.null1#
#
quadrat.null1[,2] <- sample(c(0,1,2), 10, replace=TRUE)#
quadrat.null1[,3] <- sample(c(0,1,2), 10, replace=TRUE)#
quadrat.null1[,4] <- sample(c(0,1,2), 10, replace=TRUE)#
#
ses.null2 <- ses.null1#
quadrat.null2 <- quadrat.null1#
#
ses1 <- list("null1"=ses.null1, "null2"=ses.null2)#
quadrat1 <- list("null1"=quadrat.null1, "null2"=quadrat.null2)#
#
random1 <- list("ses"=ses1, "quadrat"=quadrat1)#
#
fake.results1 <- list("random"=random1, "filtering"=random1, "competition"=random1)#
#
results <- list("iteration1"=fake.results1, "iteration2"=fake.results1)#
#
#now summarize these results#
resultsSumm <- reduceResults(results, "richness")#
#
#generate some temporary results#
failedTemp <- failed(results[[1]], "richness")#
sesSingleTemp <- sesSingle(results[[1]], "richness")#
sesIndivTemp <- sesIndiv(results, "richness")#
sesOverallTemp <- sesOverall(resultsSumm$ses, test="wilcotest", concat.by="richness")
warnings()
sesSingleTemp
?test
test(filter="test_post_sim_analyses.R")
test(filter="test_post_sim_analyses.R")
test(filter="test_post_sim_analyses")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test
test
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
sesIndivTemp
dim(sesIndivTemp)
test(filter="post_sim")
dim(sesIndivTemp)
dim(sesIndivTemp)
test(filter="post_sim")
test(filter="post_sim")
sesIndivTemp[1,"typeI"]
sesIndivTemp
sesIndivTemp[1,"typeII"]
is.na(sesIndivTemp[1,"typeII"])
is.na(sesIndivTemp[1,"typeII"])
expect_true(is.na(sesIndivTemp[1,"typeII"]))
test(filter="post_sim")
test(filter="post_sim")
sesOverallTemp
dim(sesOverallTemp)
test(filter="post_sim")
test(filter="post_sim")
temp <- readIn()
str(temp,2)
str(temp[[1]],2)
str(temp[[1]][[1]],2)
ses.null1.byrichness <- matrix(nrow=10, ncol=4)#
#
ses.null1.byrichness <- as.data.frame(ses.null1.byrichness)#
#
ses.null1.byrichness[,1] <- 10:19#
ses.null1.byrichness[,2] <- rnorm(n=10, mean=0, sd=1)#
ses.null1.byrichness[,3] <- rnorm(n=10, mean=115, sd=1)#
ses.null1.byrichness[,4] <- rnorm(n=10, mean=-115, sd=1)#
#
names(ses.null1.byrichness) <- c("richness","metric1","metric2","metric3")#
#
ses.null1.byquadrat <- ses.null1.byquadrat#
ses.null1.byquadrat[,1] <- paste("quadrat", 10:19, sep="")#
names(ses.null1.byquadrat) <- c("quadrat","metric1","metric2","metric3")
ses.null1.byrichness <- matrix(nrow=10, ncol=4)#
#
ses.null1.byrichness <- as.data.frame(ses.null1.byrichness)#
#
ses.null1.byrichness[,1] <- 10:19#
ses.null1.byrichness[,2] <- rnorm(n=10, mean=0, sd=1)#
ses.null1.byrichness[,3] <- rnorm(n=10, mean=115, sd=1)#
ses.null1.byrichness[,4] <- rnorm(n=10, mean=-115, sd=1)#
#
names(ses.null1.byrichness) <- c("richness","metric1","metric2","metric3")#
#
ses.null1.byquadrat <- ses.null1.byrichness#
ses.null1.byquadrat[,1] <- paste("quadrat", 10:19, sep="")#
names(ses.null1.byquadrat) <- c("quadrat","metric1","metric2","metric3")
ses.null1.byquadrat
str(temp[[1]][[1]][[1]],2)
str(temp[[1]][[1]][[1]][[1]],2)
str(temp[[1]][[1]][[1]],2)
str(temp[[1]][[1]],2)
ses.null1.byrichness <- matrix(nrow=10, ncol=4)#
#
ses.null1.byrichness <- as.data.frame(ses.null1.byrichness)#
#
ses.null1.byrichness[,1] <- 10:19#
ses.null1.byrichness[,2] <- rnorm(n=10, mean=0, sd=1)#
ses.null1.byrichness[,3] <- rnorm(n=10, mean=115, sd=1)#
ses.null1.byrichness[,4] <- rnorm(n=10, mean=-115, sd=1)#
#
names(ses.null1.byrichness) <- c("richness","metric1","metric2","metric3")#
#
ses.null1.byquadrat <- ses.null1.byrichness#
ses.null1.byquadrat[,1] <- paste("quadrat", 10:19, sep="")#
names(ses.null1.byquadrat) <- c("quadrat","metric1","metric2","metric3")#
#
quadrat.null1.byrichness <- ses.null1.byrichness#
#
quadrat.null1.byrichness[,2] <- sample(c(0,1,2), 10, replace=TRUE)#
quadrat.null1.byrichness[,3] <- sample(c(0,1,2), 10, replace=TRUE)#
quadrat.null1.byrichness[,4] <- sample(c(0,1,2), 10, replace=TRUE)#
#
quadrat.null1.byquadrat <- quadrat.null1.byrichness#
quadrat.null1.byquadrat[,1] <- paste("quadrat", 10:19, sep="")#
names(quadrat.null1.byquadrat) <- c("quadrat","metric1","metric2","metric3")#
#
ses.null1 <- list("richness"=ses.null1.byrichness, "quadrat"=ses.null1.byquadrat)
ses.null1
quadrat.null1 <- list("richness"=quadrat.null1.byrichness,#
	"quadrat"=quadrat.null1.byquadrat)
quadrat.null1
ses1
str(temp[[1]])
str(temp[[1]],2)
#create a list of results like what you'd expect if concat.by = "both"#
#
ses.null1.byrichness <- matrix(nrow=10, ncol=4)#
#
ses.null1.byrichness <- as.data.frame(ses.null1.byrichness)#
#
ses.null1.byrichness[,1] <- 10:19#
ses.null1.byrichness[,2] <- rnorm(n=10, mean=0, sd=1)#
ses.null1.byrichness[,3] <- rnorm(n=10, mean=115, sd=1)#
ses.null1.byrichness[,4] <- rnorm(n=10, mean=-115, sd=1)#
#
names(ses.null1.byrichness) <- c("richness","metric1","metric2","metric3")#
#
ses.null1.byquadrat <- ses.null1.byrichness#
ses.null1.byquadrat[,1] <- paste("quadrat", 10:19, sep="")#
names(ses.null1.byquadrat) <- c("quadrat","metric1","metric2","metric3")#
#
quadrat.null1.byrichness <- ses.null1.byrichness#
#
quadrat.null1.byrichness[,2] <- sample(c(0,1,2), 10, replace=TRUE)#
quadrat.null1.byrichness[,3] <- sample(c(0,1,2), 10, replace=TRUE)#
quadrat.null1.byrichness[,4] <- sample(c(0,1,2), 10, replace=TRUE)#
#
quadrat.null1.byquadrat <- quadrat.null1.byrichness#
quadrat.null1.byquadrat[,1] <- paste("quadrat", 10:19, sep="")#
names(quadrat.null1.byquadrat) <- c("quadrat","metric1","metric2","metric3")#
#
ses.null1 <- list("richness"=ses.null1.byrichness, "quadrat"=ses.null1.byquadrat)#
#
ses1 <- list("null1"=ses.null1, "null2"= ses.null1)#
#
quadrat.null1 <- list("richness"=quadrat.null1.byrichness,#
	"quadrat"=quadrat.null1.byquadrat)#
#
quadrat1 <- list("null1"=quadrat.null1, "null2"=quadrat.null1)#
#
random1 <- list("ses"=ses1, "quadrat"=quadrat1)#
#
fake.results1 <- list("random"=random1, "filtering"=random1, "competition"=random1)#
#
results <- list("iteration1"=fake.results1, "iteration2"=fake.results1)#
#
#now summarize these results#
resultsSumm <- reduceResults(results, "both")
str(resultsSumm,2)
str(results,2)
str(results[[1]],2)
failedTemp <- failed(results[[1]], "both")#
sesSingleTemp <- sesSingle(results[[1]], "both")#
sesIndivTemp <- sesIndiv(results, "both")#
sesOverallTemp <- sesOverall(resultsSumm$ses, test="wilcotest", concat.by="both")
failedTemp
sesSingleTemp
sesIndivTemp
sesOverallTemop
sesOverallTemp
dim(sesSingleTemp)
sesSingleTemp
sesIndivTemp
dim(sesIndivTemp)
test(filter="post_sim")
test(filter="post_sim")
ses.null1 <- matrix(nrow=10, ncol=4)#
#
ses.null1 <- as.data.frame(ses.null1)#
#
ses.null1[,1] <- 10:19#
ses.null1[,2] <- rnorm(n=10, mean=0, sd=1)#
ses.null1[,3] <- rnorm(n=10, mean=115, sd=1)#
ses.null1[,4] <- rnorm(n=10, mean=-115, sd=1)#
#
names(ses.null1) <- c("richness","metric1","metric2","metric3")#
#
quadrat.null1 <- ses.null1#
#
quadrat.null1[,2] <- sample(c(0,1,2), 10, replace=TRUE)#
quadrat.null1[,3] <- sample(c(0,1,2), 10, replace=TRUE)#
quadrat.null1[,4] <- sample(c(0,1,2), 10, replace=TRUE)#
#
ses.null2 <- ses.null1#
quadrat.null2 <- quadrat.null1#
#
ses1 <- list("null1"=ses.null1, "null2"=ses.null2)#
quadrat1 <- list("null1"=quadrat.null1, "null2"=quadrat.null2)#
#
random1 <- list("ses"=ses1, "quadrat"=quadrat1)#
#
fake.results1 <- list("random"=random1, "filtering"=random1, "competition"=random1)#
#
results <- list("iteration1"=fake.results1, "iteration2"=fake.results1)#
#
#now summarize these results#
resultsSumm <- reduceResults(results, "richness")#
#
#generate some temporary results#
failedTemp <- failed(results[[1]], "richness")#
sesSingleTemp <- sesSingle(results[[1]], "richness")#
sesIndivTemp <- sesIndiv(results, "richness")#
sesOverallTemp <- sesOverall(resultsSumm$ses, test="wilcotest", concat.by="richness")
sesSingleTemp
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
c(rep("random",6), rep("filtering", 6),#
		rep("competition", 6))
sesSingleTemp[,"simulation"]
sesSingleTemp[,"simulation"] == c(rep("random",6), rep("filtering", 6),#
		rep("competition", 6))
all(sesSingleTemp[,"simulation"] == c(rep("random",6), rep("filtering", 6),#
		rep("competition", 6))))
all(sesSingleTemp[,"simulation"] == c(rep("random",6), rep("filtering", 6),#
		rep("competition", 6)))
test(filter="post_sim")
test(filter="post_sim")
sesSingleTemp[,"metric"] == rep(c("metric1", "metric2"), 9))
rep(c("metric1", "metric2"), 9)
sesSingleTemp[,"metric"] == rep(c("metric1", "metric2"), 9))
sesSingleTemp[,"metric"] == rep(c("metric1", "metric2"), 9)
sesSingleTemp
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
ses.null1.byrichness <- matrix(nrow=10, ncol=4)#
#
ses.null1.byrichness <- as.data.frame(ses.null1.byrichness)#
#
ses.null1.byrichness[,1] <- 10:19#
ses.null1.byrichness[,2] <- rnorm(n=10, mean=0, sd=1)#
ses.null1.byrichness[,3] <- rnorm(n=10, mean=1115, sd=1)#
ses.null1.byrichness[,4] <- rnorm(n=10, mean=-1115, sd=1)#
#
names(ses.null1.byrichness) <- c("richness","metric1","metric2","metric3")#
#
ses.null1.byquadrat <- ses.null1.byrichness#
ses.null1.byquadrat[,1] <- paste("quadrat", 10:19, sep="")#
names(ses.null1.byquadrat) <- c("quadrat","metric1","metric2","metric3")#
#
quadrat.null1.byrichness <- ses.null1.byrichness#
#
quadrat.null1.byrichness[,2] <- sample(c(0,1,2), 10, replace=TRUE)#
quadrat.null1.byrichness[,3] <- sample(c(0,1,2), 10, replace=TRUE)#
quadrat.null1.byrichness[,4] <- sample(c(0,1,2), 10, replace=TRUE)#
#
quadrat.null1.byquadrat <- quadrat.null1.byrichness#
quadrat.null1.byquadrat[,1] <- paste("quadrat", 10:19, sep="")#
names(quadrat.null1.byquadrat) <- c("quadrat","metric1","metric2","metric3")#
#
ses.null1 <- list("richness"=ses.null1.byrichness, "quadrat"=ses.null1.byquadrat)#
#
ses1 <- list("null1"=ses.null1, "null2"= ses.null1)#
#
quadrat.null1 <- list("richness"=quadrat.null1.byrichness,#
	"quadrat"=quadrat.null1.byquadrat)#
#
quadrat1 <- list("null1"=quadrat.null1, "null2"=quadrat.null1)#
#
random1 <- list("ses"=ses1, "quadrat"=quadrat1)#
#
fake.results1 <- list("random"=random1, "filtering"=random1, "competition"=random1)#
#
results <- list("iteration1"=fake.results1, "iteration2"=fake.results1)#
#
#now summarize these results#
resultsSumm <- reduceResults(results, "both")#
#
#generate some temporary results#
failedTemp <- failed(results[[1]], "both")#
sesSingleTemp <- sesSingle(results[[1]], "both")#
sesIndivTemp <- sesIndiv(results, "both")#
sesOverallTemp <- sesOverall(resultsSumm$ses, test="wilcotest", concat.by="both")
sesSingleTemp
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
sesSingleTemp
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
test(filter="post_sim")
