summ$ses$random$richness
apply(dataframe, 2, tWrap)
apply(summ$ses$random$richness, 2, tWrap)
class(apply(summ$ses$random$richness, 2, tWrap))
load_all()
tWrapApply(summ$ses$random$richness)
tWrapApply
load_all()
tWrapApply(summ$ses$random$richness)
load_all()
tWrapApply(summ$ses$random$richness)
load_all()
tWrapApply(summ$ses$random$richness)
t(tWrapApply(summ$ses$random$richness))
load_all()
t(tWrapApply(summ$ses$random$richness))
t(tWrapApply(summ$ses$random$richness))
load_all()
t(tWrapApply(summ$ses$random$richness))
ls()
load_all()
t(tWrapApply(summ$ses$random$richness))
output
apply(summ$ses$random$richness, 2, tWrap)
load_all()
tWrapApply
datarame
dataframe
tWrapApply(summ$ses$random$richness)
load_all()
tWrapApply(summ$ses$random$richness)
load_all()
tWrapApply(summ$ses$random$richness)
load_all()
tWrapApply(summ$ses$random$richness)
load_all()
tWrapApply(summ$ses$random$richness)
load_all()
tWrapApply(summ$ses$random$richness)
test <- tWrapApply(summ$ses$random$richness)
test$metric
class(test)
load_all()
test <- tWrapApply(summ$ses$random$richness)
test
load_all()
test <- tWrapApply(summ$ses$random$richness)
test
load_all()
test <- tWrapApply(summ$ses$random$richness)
test
load_all()
test <- tWrapApply(summ$ses$random$richness)
test
lapply(summ$ses$richnnes, tWrapApply)
lapply(summ$ses$random, tWrapApply)
unlist(lapply(summ$ses$random, tWrapApply))
null.list
str(summ,2)
class(summ$ses)
class(summ$ses$random)
str(summ$ses$random)
temp <- lapply(summ$ses$random, tWrapApply)
str(temp)
class(unlist(temp))
as.data.frame(temp)
data.frame(temp)
Reduce(temp)
Reduce(rbind,temp)
length(temp)
str(temp)
dim(temp)
dim(temp[[1]])
dim(temp[[1]][1])
dim(temp[[1]])[1]
a <- c("sp2","sp2")
a*5
paste(a)
paste(a,2)
names(temp)
load_all()
test <- tWrapLApply(summ$ses$random)
names(summ$ses$random)
rep(names(summ$ses$random),3)
paste(names(summ$ses$random))
rep(paste(names(summ$ses$random)), 2)
expand.grid(names(summ$ses$random), 2)
expand.grid(names(summ$ses$random))
?expand.grid
expand.grid(names(summ$ses$random), names(summ$ses$random$richness))
expand.grid(names(summ$ses$random), names(summ$ses$random$richness))[,1]
load_all()
test <- tWrapLApply(summ$ses$random)
str(temp,2)
dim(temp[[1]])
dim(temp[[1]])[1]
load_all()
test <- tWrapLApply(summ$ses$random)
str(test)
head(test)
test
load_all()
test <- sesOverall(summ$ses)
str(test,2)
head(test)
test
load_all()
test <- sesOverall(summ$ses)
head(test)
results <- readIn()
summ <- reduceResults(results)
str(summ,2)
test <- sesOverall(summ$ses)
str(test)
head(test)
random
random <- test[test$simulation == "random",]
random
head(random)
test <- tWrapLApply(summ$ses$random)
str(test)
head(test)
load_all()
test2 <- sesOverall(summ$ses)
str(test2)
head(test2)
test2
load_all()
test2 <- sesOverall(summ$ses)
head(test2)
test2
random <- test[test$simulation == "random",]
random
test <- sesOverall(summ$ses)
head(test)
random <- test[test$simulation == "random",]
head(random)
dim(test)
dim(random)
171*3
temp <- lapply(summ$ses, tWrapLApply)
names(temp)
names(summ$ses)
dim(temp[[1]])[1]
temp
simNames <- expand.grid(names(summ$ses), dim(temp[[1]])[1])[,1]
head(simNames)
simNames
dim(temp[[1]])[1]
test <- expand.grid(names(summ$ses), dim(temp[[1]])[1])
head(test)
test
names(temp)
names(temp[[1]])
temp[[1]]$null.model
test <- expand.grid(names(summ$ses), temp[[1]]$null.model)
head(test)
test <- expand.grid(temp[[1]]$null.model, names(summ$ses))
head(test)
tail(test)
load_all()
test <- sesOverall(summ$ses)
head(test)
tail(test)
load_all()
test <- sesOverall(summ$ses)
head(test)
load_all()
test <- sesOverall(summ$ses)
head(test)
tail(test)
test
test <- tWrapApply(summ$ses$random)
test <- tWrapLApply(summ$ses$random)
str(test,2)
head(test)
temp <- lapply(summ$ses$random, tWrapApply)
head(temp)
nullNames <- expand.grid(names(summ$ses$random), dim(temp[[1]])[1])
head(nullNames)
load_all()
test <- sesOverall(summ$ses)
str(test)
head(test)
test
random <- test[test$simulation == "random",]
random
randomTypeI <- random[random$p.value <= 0.5, ]
randomTypeI
randomTypeI <- random[random$p.value <= 0.05, ]
randomTypeI
filtering <- test[test$simulation == "filtering",]
filtering
filteringTypeII <- filtering[filtering$p.value > 0.05, ]
filteringTypeII
competition <- test[test$simulation == "competition", ]#
#
competitionTypeII <- competition[competition$p.value > 0.05, ]
competition
competitionTypeII
str(results,2)
length(results)
str(summ,2)
str(summ$ses,2)
summ$random$richness
summ$ses$random$richness
head(summ$ses$random$richness)
hist(summ$ses$random$richness$NAW_MPD)
hist(summ$ses$random$richness$PAE)
hist(summ$ses$random$richness$IAC)
hist(summ$ses$random$richness$PD)
hist(summ$ses$filtering$richness$PD)
hist(summ$ses$filtering$richness$PAE)
hist(summ$ses$filtering$richness$NAW_MPD)
hist(summ$ses$filtering$richness$inter_MPD)
hist(summ$ses$competition$richness$inter_MPD)
hist(summ$ses$competition$richness$PAE)
m
m <- matrix(nrow=5, ncol=5)
layout(m)
m <- matrix(nrow=5, ncol=5, 1:20)
layout(m)
for(i in 1:20)
hist(summ$ses$random$richness[,i])
layout(m)
plot(1:10)
m <- matrix(nrow=5, ncol=4, 1:20)
layout(m)
plot(1:10)
layout(m)
for(i in 1:20)
hist(summ$ses$random$richness[,i])
layout(m)
for(i in 2:20)#
{#
	hist(summ$ses$random$richness[,i], main=names(summ$ses$random$richness)[i])#
}
layout(m)
for(i in 2:20)#
{#
	hist(summ$ses$random$richness[,i], main=names(summ$ses$random$richness)[i], xlab="SES")#
}
m <- matrix(nrow=5, ncol=4, 1:20, byrow=T)
for(i in 2:20)#
{#
	hist(summ$ses$random$richness[,i], main=names(summ$ses$random$richness)[i], xlab="SES")#
}
layout(m)
for(i in 2:20)#
{#
	hist(summ$ses$random$richness[,i], main=names(summ$ses$random$richness)[i], xlab="SES")#
}
for(i in 2:20)#
{#
	hist(summ$ses$filtering$richness[,i], main=names(summ$ses$random$richness)[i], xlab="SES")#
}
for(i in 2:20)#
{#
	hist(summ$ses$competition$richness[,i], main=names(summ$ses$random$richness)[i], xlab="SES")#
}
layout(m)
for(i in 2:20)#
{#
	hist(summ$ses$random$richness[,i], main=names(summ$ses$random$richness)[i], xlab="ses")#
}
layout(m)
for(i in 2:20)#
{#
	hist(summ$ses$filtering$richness[,i], main=names(summ$ses$filtering$richness)[i], xlab="ses")#
}
layout(m)
layout(m)
for(i in 2:20)#
{#
	hist(summ$ses$competition$richness[,i], main=names(summ$ses$competition$richness)[i], xlab="ses")#
}
randomTypeI
filteringTypeII
competitionTypeII
