isMonophyletic(tree, lookup)
genera <- unique(lookup)
genera
genera <- unique(lookup$genus)
genera
genera[1]
families <- unique(lookup$family)
families
genusResults <- c()#
	familyResults <- c()
temp <- lookup.table$species[lookup.table$genus == genera[1]]
temp <- lookup$species[lookup$genus == genera[1]]
temp
plot(tree)
genusResults[i] <- is.monophyletic(phy=tree, tips=temp)
genusResults[1] <- is.monophyletic(phy=tree, tips=temp)
genusResults
temp[1:3]
genusResults[1] <- is.monophyletic(phy=tree, tips=temp[1:3])
genusResults
plot(tree)
plot(tree, cex=0.7)
plot(tree, cex=0.4)
genusResults[1] <- is.monophyletic(phy=tree, tips=as.character(temp[1:3]))
genusResults
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
		names(genusResults[i]) <- genera[i]#
	}#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
		names(familyResults[i]) <- families[i]#
	}#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}
isMonophyletic(tree, lookup)
genusResults
names(genusResults[i]) <- genera[i]
names(genusResults[i]) <- genera[1]
names(genusResults[1]) <- genera[1]
genusResults
class(genusResults)
test <- as.character(genusResults)
test
names(test)[1] <- genera[1]
test
genera1
genera[1]
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
	genusResults <- data.frame(genus=genera, monophyletic=genusResults)#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
#
	familyResults <- data.frame(family=families, monophyletic=familyResults)#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}
isMonophyletic(tree, lookup)
head(lookup)
lookup$genus[1:3]
lookup$genus[1:3] <- "genusE"
head(lookup$genus)
lookup$genus <- as.character(genus)
tree <- sim.bdtree(stop="taxa", n=100)#
#
species <- as.character(tree$tip.label)#
#
genus <- as.character(c(rep("genusA", 25), rep("genusB", 25), #
	rep("genusC", 25), rep("genusD", 25)))#
#
family <- as.character(c(rep("family1", 50), rep("family2", 50)))#
#
lookup <- data.frame(species, genus, family)
head(lookup)
isMonophyletic(lookup)
isMonophyletic(tree, lookup)
lookup
isMonophyletic(tree, lookup)
temp <- tree$tip.label[1:25]
temp
is.monophyletic(tree, tips=temp)
library(ape)
?is.monophyletic
data("bird.orders")
plot(bird.order)
plot(bird.orders)
temp <- c("Passeriformes","Ciconiiformes","Gruiformes","Columbiformes")
is.monophyletic(phy=bird.order, tips=temp)
is.monophyletic(phy=bird.orders, tips=temp)
temp2 <- c("Passeriformes","Ciconiiformes","Gruiformes","Columbiformes","Strigiformes")
is.monophyletic(phy=bird.orders, tips=temp2)
temp2 <- c("Passeriformes","Ciconiiformes","Gruiformes","Columbiformes","Strigiformes","Musophagiformes")
is.monophyletic(phy=bird.orders, tips=temp2)
library(geiger)
tree <- sim.bdtree(stop="taxa", n=100)#
#
species <- as.character(tree$tip.label)#
#
genus <- as.character(c(rep("genusA", 25), rep("genusB", 25), #
	rep("genusC", 25), rep("genusD", 25)))#
#
family <- as.character(c(rep("family1", 50), rep("family2", 50)))#
#
lookup <- data.frame(species, genus, family)#
#
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
	genusResults <- data.frame(genus=genera, monophyletic=genusResults)#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
#
	familyResults <- data.frame(family=families, monophyletic=familyResults)#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}
isMonophyletic(tree, lookup)
tree <- sim.bdtree(stop="taxa", n=100)#
#
species <- as.character(tree$tip.label)#
#
genus <- as.character(c(rep("genusA", 25), rep("genusB", 25), #
	rep("genusC", 25), rep("genusD", 25)))#
#
family <- as.character(c(rep("family1", 50), rep("family2", 50)))#
#
lookup <- data.frame(species, genus, family)#
#
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
	genusResults <- data.frame(genus=genera, monophyletic=genusResults)#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
#
	familyResults <- data.frame(family=families, monophyletic=familyResults)#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}
isMonophyletic(tree, lookup)
tree <- sim.bdtree(stop="taxa", n=100)#
#
species <- as.character(tree$tip.label)#
#
genus <- as.character(c(rep("genusA", 25), rep("genusB", 25), #
	rep("genusC", 25), rep("genusD", 25)))#
#
family <- as.character(c(rep("family1", 50), rep("family2", 50)))#
#
lookup <- data.frame(species, genus, family)#
#
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
	genusResults <- data.frame(genus=genera, monophyletic=genusResults)#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
#
	familyResults <- data.frame(family=families, monophyletic=familyResults)#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}
isMonophyletic(tree, lookup)
test <- lookup
tree2 <- tree
isMonophyletic(tree2, test)
head(lookup)
plot(tree)
plot(tree,cex=0.4)
lookup$genus[1:6]
?data.frame
lookup <- data.frame(species, genus, family, stringsAsFactors=FALSE)
lookup$genus[1:6]
isMonophyletic(tree, lookup)
lookup$genus[1:6] <- "genusE"
isMonophyletic(tree, lookup)
set.seed(9)
plot(sim.bdtree(stop="taxa",n=100))
set.seed(9)
quartz()
plot(sim.bdtree(stop="taxa",n=100))
tree <- sim.bdtree(stop="taxa", n=100)#
#
species <- as.character(tree$tip.label)#
#
genus <- as.character(c(rep("genusA", 25), rep("genusB", 25), #
	rep("genusC", 25), rep("genusD", 25)))#
#
family <- as.character(c(rep("family1", 50), rep("family2", 50)))#
#
lookup <- data.frame(species, genus, family, stringsAsFactors=FALSE)#
#
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
	genusResults <- data.frame(genus=genera, monophyletic=genusResults)#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
#
	familyResults <- data.frame(family=families, monophyletic=familyResults)#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}
isMonophyletic(tree, lookup)
tree <- sim.bdtree(stop="taxa", n=100)#
#
species <- as.character(tree$tip.label)#
#
genus <- as.character(c(rep("genusA", 25), rep("genusB", 25), #
	rep("genusC", 25), rep("genusD", 25)))#
#
family <- as.character(c(rep("family1", 50), rep("family2", 50)))#
#
lookup <- data.frame(species, genus, family, stringsAsFactors=FALSE)#
#
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
	genusResults <- data.frame(genus=genera, monophyletic=genusResults)#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
#
	familyResults <- data.frame(family=families, monophyletic=familyResults)#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}#
#
isMonophyletic(tree, lookup)
plot(tree)
plot(tree, cex=0.5)
tree <- sim.bdtree(stop="taxa", n=100)#
#
species <- as.character(tree$tip.label)#
#
genus <- as.character(c(rep("genusA", 25), rep("genusB", 25), #
	rep("genusC", 25), rep("genusD", 25)))#
#
family <- as.character(c(rep("family1", 50), rep("family2", 50)))#
#
lookup <- data.frame(species, genus, family, stringsAsFactors=FALSE)#
#
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
	genusResults <- data.frame(genus=genera, monophyletic=genusResults)#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
#
	familyResults <- data.frame(family=families, monophyletic=familyResults)#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}#
#
isMonophyletic(tree, lookup)
plot(tree, cex=0.5)
tree <- sim.bdtree(stop="taxa", n=100)#
#
species <- as.character(tree$tip.label)#
#
genus <- as.character(c(rep("genusA", 25), rep("genusB", 25), #
	rep("genusC", 25), rep("genusD", 25)))#
#
family <- as.character(c(rep("family1", 50), rep("family2", 50)))#
#
lookup <- data.frame(species, genus, family, stringsAsFactors=FALSE)#
#
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
	genusResults <- data.frame(genus=genera, monophyletic=genusResults)#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
#
	familyResults <- data.frame(family=families, monophyletic=familyResults)#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}#
#
isMonophyletic(tree, lookup)
plot(tree)
plot(tree, cex=0.4)
tree <- sim.bdtree(stop="taxa", n=100)#
#
species <- as.character(tree$tip.label)#
#
genus <- as.character(c(rep("genusA", 25), rep("genusB", 25), #
	rep("genusC", 25), rep("genusD", 25)))#
#
family <- as.character(c(rep("family1", 50), rep("family2", 50)))#
#
lookup <- data.frame(species, genus, family, stringsAsFactors=FALSE)#
#
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
	genusResults <- data.frame(genus=genera, monophyletic=genusResults)#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
#
	familyResults <- data.frame(family=families, monophyletic=familyResults)#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}#
#
isMonophyletic(tree, lookup)->test
test
test$tt <- c("sp1","sp2")
test
tree <- sim.bdtree(stop="taxa", n=100)#
#
species <- as.character(tree$tip.label)#
#
genus <- as.character(c(rep("genusA", 25), rep("genusB", 25), #
	rep("genusC", 25), rep("genusD", 25)))#
#
family <- as.character(c(rep("family1", 50), rep("family2", 50)))#
#
lookup <- data.frame(species, genus, family, stringsAsFactors=FALSE)#
#
isMonophyletic <- function(tree, lookup.table)#
{#
	genera <- unique(lookup.table$genus)#
	families <- unique(lookup.table$family)#
	genusResults <- c()#
	familyResults <- c()#
	for(i in 1:length(genera))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$genus == genera[i]])#
		genusResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
	genusResults <- data.frame(genus=genera, monophyletic=genusResults)#
	for(i in 1:length(families))#
	{#
		temp <- as.character(lookup.table$species[lookup.table$family == families[i]])#
		familyResults[i] <- is.monophyletic(phy=tree, tips=temp)#
	}#
#
	familyResults <- data.frame(family=families, monophyletic=familyResults)#
	output <- list("genera" = genusResults, "family" = familyResults)#
	output#
}#
#
isMonophyletic(tree, lookup)->test
test
Reduce(rbind,test)
?rnorm
rnorm(n=100, mean=2)
round(rnorm(n=100, mean=2))
library(devtools)
load_all()
?multiLinker
system.time(multiLinker(no.taxa=50, arena.length=300, mean.log.individuals=3.2,#
	length.parameter=5000, sd.parameter=50, max.distance=20, proportion.killed=0.3,#
	competition.iterations=2, no.quadrats=20, quadrat.length=30, concat.by="richness",#
	randomizations=3, cores=3, cluster=FALSE, iterations=2, prefix="test",#
	nulls=list("richness"=metricTester:::my_richnessNull,#
	"frequency"=metricTester:::my_frequency)))
test <- readIn()
test2 <- sesIndiv(test, "richness")
warnings()
test2
explore
load_all()
load_all()
load_all()
tt <- TRUE
tt
if(tt)
print(1)
tt <- FALSE
if(tt)
print(1)
cdm
?simulateComm
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, richness.vector=10:25, abundances=sim.abundances)
matrix2sample(cdm)
head(matrix2sample(cdm))
?dispersalNull
#set up a matrix to simulate lat/long#
coordDF <- matrix(ncol=2, nrow=100)#
#
coordDF[,1] <- runif(n=100, min=40, max=50)#
coordDF[,2] <- runif(n=100, min=-130, max=-120)#
#
#convert to data frame, give column names. also give row names such as if the cells had#
#names (as they should or there'd be no way to track them)#
coordDF <- as.data.frame(coordDF)#
#
row.names(coordDF) <- paste("cell", 1:100, sep="")#
#
names(coordDF) <- c("latitude","longitude")#
#
#calculate the distances among all of these points. in the real program you're going to#
#want to calculate great arc distance or whatever it's called#
distances <- dist(coordDF, diag=TRUE, upper=TRUE)#
#
#turn it into a symmetric distance matrix#
distances <- as.matrix(distances)#
#
#simulate a regional phylogeny of 100 species#
tree <- sim.bdtree(b=1, d=0, stop="taxa", n=100)#
#
#simulate a community data matrix of 100 cells by 100 species. do it 4 times so that#
#you can use your simulateComm function and have it span a reasonable range of richness#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm1 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
cdm2 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
cdm3 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
cdm4 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
#
#bind these into a list and use dplyr rbind_all to bind together. recast as data frame#
#
cdmList <- list(cdm1, cdm2, cdm3, cdm4)#
#
cdm <- rbind_all(cdmList)#
#
cdm <- as.data.frame(cdm)#
#
#fix as necessary manually here (i.e. make sure dimensions are 100 x 100), seems to#
#usually work. then give cell names#
#
row.names(cdm) <- paste("cell", 1:100, sep="")#
#
#fill NAs with 0s.#
#
cdm[is.na(cdm)] <- 0
newCDM <- dispersalNull(cdm, tree, distances)
newCDM
head(newCDM)
head(cdm)
abundOrig <- apply(cdm, 2, lengthNonZeros)
abundNew <- apply(newCDM, 2, lengthNonZeros)
plot(abundOrig~abundNew)
abundNew <- apply(newCDM, 2, sum)
abundOrig <- apply(cdm, 2, sum)
plot(abundOrig~abundNew)
head(matrix2sample(cdm))
distribution
distribution <- rnorm(n=100, mean=7, sd=1)
distribution
round(distribution)
distribution[5]
distribution <- round(distribution)
distribution[5] <- -1
distribution[distribution < 0]
load_all()
newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE)
head(newCDM)
abundNew <- apply(newCDM, 2, sum)
abundOrig <- apply(cdm, 2, sum)
plot(abundNew~abundOrig)
abundNew <- apply(newCDM, 2, lengthNonZeros)
abundOrig <- apply(cdm, 2, lengthNonZeros)
plot(abundNew~abundOrig)
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=TRUE))
load_all()
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=TRUE))
head(matrix2sample(cdm))
temp <- sample(x=cdm[10,], size=1)
temp
rnorm(n=100, mean=temp, sd=1)
as.numeric(temp)
rnorm(n=100, mean=as.numeric(temp), sd=1)
load_all()
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=TRUE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=TRUE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=TRUE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=TRUE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=TRUE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=TRUE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=FALSE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=FALSE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=FALSE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=FALSE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=FALSE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=TRUE))
abundNew <- apply(newCDM, 2, sum)#
abundOrig <- apply(cdm, 2, sum)#
plot(abundNew~abundOrig)
abundNew <- apply(newCDM, 2, lengthNonZeros)#
abundOrig <- apply(cdm, 2, lengthNonZeros)#
plot(abundNew~abundOrig)
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, explore=TRUE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, explore=TRUE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, explore=TRUE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, explore=FALSE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, explore=FALSE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, explore=TRUE))
abundNew <- apply(newCDM, 2, lengthNonZeros)#
abundOrig <- apply(cdm, 2, lengthNonZeros)#
plot(abundNew~abundOrig)
abundNew <- apply(newCDM, 2, sum)#
abundOrig <- apply(cdm, 2, sum)#
plot(abundNew~abundOrig)
2.670/2.566
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, explore=FALSE))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, explore=FALSE))
4.313/2.548
2.548/4.313
head(cdm)
tt <- cdm[cdm!=0]
tt
hist(tt)
sample(tt,1)
load_all()
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, explore="directly"))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, abundance.assigned="directly"))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, abundance.assigned="explore"))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=TRUE, abundance.assigned="overall"))
system.time(newCDM <- dispersalNull(cdm, tree, distances, abundance.matters=FALSE, abundance.assigned="overall"))
122/8
15.25*1300
20000/60
695*75
333/60
head(cdm)
dim(cdmm)
dim(cdm)
length(10:34)
?rlnorm
ls()
load_all()
?dispersalNull
basic
library(metricTester)#
#
#set up a matrix to simulate lat/long#
coordDF <- matrix(ncol=2, nrow=100)#
#
coordDF[,1] <- runif(n=100, min=40, max=50)#
coordDF[,2] <- runif(n=100, min=-130, max=-120)#
#
#convert to data frame, give column names. also give row names such as if the cells had#
#names (as they should or there'd be no way to track them)#
coordDF <- as.data.frame(coordDF)#
#
row.names(coordDF) <- paste("cell", 1:100, sep="")#
#
names(coordDF) <- c("latitude","longitude")#
#
#calculate the distances among all of these points. in the real program you're going to#
#want to calculate great arc distance or whatever it's called#
distances <- dist(coordDF, diag=TRUE, upper=TRUE)#
#
#turn it into a symmetric distance matrix#
distances <- as.matrix(distances)#
#
#simulate a regional phylogeny of 100 species#
tree <- sim.bdtree(b=1, d=0, stop="taxa", n=100)#
#
#simulate a community data matrix of 100 cells by 100 species. do it 4 times so that#
#you can use your simulateComm function and have it span a reasonable range of richness#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm1 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
cdm2 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
cdm3 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
cdm4 <- simulateComm(tree, richness.vector=10:34, abundances=sim.abundances)#
#
#bind these into a list and use dplyr rbind_all to bind together. recast as data frame#
#
cdmList <- list(cdm1, cdm2, cdm3, cdm4)#
#
cdm <- rbind_all(cdmList)#
#
cdm <- as.data.frame(cdm)#
#
#fix as necessary manually here (i.e. make sure dimensions are 100 x 100), seems to#
#usually work. then give cell names#
#
row.names(cdm) <- paste("cell", 1:100, sep="")#
#
#fill NAs with 0s.#
#
cdm[is.na(cdm)] <- 0#
#
basicOccurrences <- matrix(nrow=10, ncol=100)#
basicAbundances <- matrix(nrow=10, ncol=100)#
#
for(i in 1:10)#
{#
	newCDM <- dispersalNull(cdm=cdm, tree=tree, distances.among=distances,#
		abundance.matters=TRUE, abundance.assigned="directly")#
	basicOccurrences[i,] <- apply(newCDM, 2, lengthNonZeros)#
	basicAbundances[i,] <- apply(newCDM, 2, sum)#
}
basicOccurrences
obsOccurrences <- apply(cdm, 2, lengthNonZeros)#
obsAbundances <- apply(cdm, 2, sum)
meanBO <- apply(basicOccurrences, 2, mean)#
meanBA <- apply(basicAbundances, 2, mean)
plot(obsOccurrences, meanBO)
summary(lm(meanBO~obsOccurrences))
summary(lm(meanBA~obsAbundances))
plot(meanBA~obsAbundances)
basicOccurrences <- matrix(nrow=10, ncol=100)#
basicAbundances <- matrix(nrow=10, ncol=100)#
#
system.time(for(i in 1:20)#
{#
	newCDM <- dispersalNull(cdm=cdm, tree=tree, distances.among=distances,#
		abundance.matters=TRUE, abundance.assigned="directly")#
	basicOccurrences[i,] <- apply(newCDM, 2, lengthNonZeros)#
	basicAbundances[i,] <- apply(newCDM, 2, sum)#
})
basicOccurrences <- matrix(nrow=20, ncol=100)#
basicAbundances <- matrix(nrow=20, ncol=100)#
#
system.time(for(i in 1:20)#
{#
	newCDM <- dispersalNull(cdm=cdm, tree=tree, distances.among=distances,#
		abundance.matters=TRUE, abundance.assigned="directly")#
	basicOccurrences[i,] <- apply(newCDM, 2, lengthNonZeros)#
	basicAbundances[i,] <- apply(newCDM, 2, sum)#
})
meanBO <- apply(basicOccurrences, 2, mean)#
meanBA <- apply(basicAbundances, 2, mean)
plot(meanBO~basicOccurrences)
plot(meanBO~obsOccurrences)
summary(lm(meanBO~obsOccurrences))
plot(meanBA~obsAbundances)
summary(lm(meanBA~obsAbundances))
variantOccurrences <- matrix(nrow=20, ncol=100)#
variantAbundances <- matrix(nrow=20, ncol=100)#
#
#takes about 90s for 20 randomizations#
system.time(for(i in 1:20)#
{#
	newCDM <- dispersalNull(cdm=cdm, tree=tree, distances.among=distances,#
		abundance.matters=FALSE, abundance.assigned="overall")#
	variantOccurrences[i,] <- apply(newCDM, 2, lengthNonZeros)#
	variantAbundances[i,] <- apply(newCDM, 2, sum)#
})#
#
meanVO <- apply(variantOccurrences, 2, mean)#
meanVA <- apply(variantAbundances, 2, mean)
plot(meanVO~obsOccurrences)
summary(lm(meanVO~obsOccurrences))
summary(lm(meanVA~obsAbundances))
plot(meanVA~obsAbundances)
plot(meanVA~obsAbundances)
