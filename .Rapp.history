head(test)
?prepNulls
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
prepped <- prepNulls(tree, cdm)
head(cdm)
runNulls(prepped)
Sys.time()
prefix
runif(10, 0, 10)
round(runif(10, 0, 10))
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)
prefix1
?gsub
?sub
prefix1 <- gsub("[:]", "", prefix1)
prefix1
prefix2 <- round(runif(100, 1, 100))
prefix2
prefix2 <- sample(round(runif(100, 1, 100)), size=1)
prefix2
prefix <- paste(prefix1, prefix2, sep="")
prefix
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)#
prefix1 <- gsub("[:]", "", prefix1)#
prefix2 <- sample(round(runif(100, 1, 100)), size=1)#
prefix <- paste(prefix1, prefix2, sep="_")
prefi
prefix
8*5
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)#
prefix1 <- gsub("[:]", "", prefix1)#
prefix2 <- sample(round(runif(100, 1, 100)), size=1)#
prefixBoth <- paste(prefix1, prefix2, sep="_")
prefixBoth
346395.6/60/60
96/24
96/20
24*7
168/4.8
library(metricTester)
defineMetrics()
defineNulls()
8*0.07
4*1000
4000/24
library(metricTester)
?dispersalNull
expectations
expectation
library(metricTester)
?metricsNnulls
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm, randomizations=3, cores=1, cluster=FALSE)
str(rawResults,2)
rawResults <- metricsNnulls(tree, cdm, randomizations=3, cores=1, cluster=FALSE, nulls=list("dispersal"=metricTester:::dispersalNull), metrics=list("richness"=metricTester:::my_richness, "NAW_MPD"=metricTester:::naw_mpd))
library(metricTester)
defineMetrics()
raoD
?outer
?raoD
tree <- sim.bdtree(stop="taxa", n=50)
?simulateComm
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)
N <- length(cdm[, 1])
N
D <- vector(length = N)
D
D[1] <- sum(tij * outer(as.vector(t(x[1, ])), as.vector(t(x[1, ]))))
tij <- cophenetic(tree)/2
D[1] <- sum(tij * outer(as.vector(t(x[1, ])), as.vector(t(x[1, ]))))
D[1] <- sum(tij * outer(as.vector(t(cdm[1, ])), as.vector(t(cdm[1, ]))))
D
t(cdm[1, ])
as.vector(t(cdm[1, ]))
raoD(cdm, tree)
sum(tij * outer(as.vector(t(cdm[1, ])), as.vector(t(cdm[1, ]))))
raOD
raoD
fix(raoD)
raoD(cdm, tree)
x <- as.matrix(cdm)
D <- vector(length = N)
D
D[k] <- sum(tij * outer(as.vector(t(x[1, ])), #
        as.vector(t(x[1, ]))))
D[1] <- sum(tij * outer(as.vector(t(x[1, ])), #
        as.vector(t(x[1, ]))))
D
?sweet
?sweep
defineMetrics()
?prepData
prepped <- prepData(tree, cdm)
calcMetrics(prepped)
calcMetrics(prepped)->temp
calcMetrics
calcMetrics(prepped)->temp
temp
plot(temp$SimpsonsPhy~temp$QE)
temp$SimpsonsPhy/temp$QE
426593.72/60
7109/24
426593.72/60/60
426593.72/60/60/24
#this is a simple R script that will ultimately make an .RDS file#
#
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)#
prefix1 <- gsub("[:]", "", prefix1)#
prefix2 <- sample(round(runif(100, 1, 100)), size=1)#
prefixBoth <- paste(prefix1, prefix2, sep="_")#
#
temp <- rnorm(100)#
#
filename <- paste(prefixBoth, ".RDS", sep="")#
#
saveRDS(temp, file=filename)
head(temp)
8*8
64*1000
64000/60
64000/24
64000/24/365
paste("a","b","C",sep="")
2660-250-200-100-130-1300-170
870-650-120-80
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)#
prefix1 <- gsub("[:]", "", prefix1)#
prefix2 <- sample(round(runif(100, 1, 100)), size=1)#
prefixBoth <- paste(prefix1, prefix2, sep="_")#
#
temp <- rnorm(100)#
#
filename <- paste(prefixBoth, ".RDS", sep="")#
#
for(i in 1:3)#
{#
	newFilename <- paste("iteration", i, filename, sep="")#
	saveRDS(temp, file=newFilename)#
}
0.1*8*50
1.5*5
1.035*3.3/2.5
1.036*3.3/2.5
5.5/2
1.036*2.75/2.5
250/35
6.6*35
231/5
230/35
0.34/10*7.5
0.1/2.7*8.5
.34*7.5
0.1*8.5
640/12
53/4
53/3
library(metricTester)#
#
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)#
prefix1 <- gsub("[:]", "", prefix1)#
prefix2 <- sample(round(runif(100, 1, 100)), size=1)#
prefixBoth <- paste(prefix1, prefix2, sep="_")#
#
system.time(multiLinker(no.taxa=100, arena.length=sqrt(100000), mean.log.individuals=3.5, #
 	length.parameter=1000, sd.parameter=40, max.distance=20, proportion.killed=0.2, #
	competition.iterations=60, no.quadrats=20, quadrat.length=sqrt(1000), #
	concat.by="both", randomizations=1000, cores=4, cluster=FALSE, iterations=1,#
	prefix=prefixBoth,#
	metrics=list("richness"=metricTester:::my_richness, "NAW_MPD"=metricTester:::naw_mpd, "inter_MPD"=metricTester:::inter_mpd, #
	"intra_MPD"=metricTester:::intra_mpd, "complete_MPD"=metricTester:::complete_mpd, "NAW_MNTD"=metricTester:::naw_mntd,#
	"AW_MNTD"=metricTester:::aw_mntd, "PSE"=metricTester:::my_pse, "PAE"=metricTester:::PAE, "IAC"=metricTester:::IAC, "Haed"=metricTester:::Haed, "Eaed"=metricTester:::Eaed,#
	"Eed"=metricTester:::Eed, "Hed"=metricTester:::Hed, "PD"=metricTester:::my_PD, "PD_Cadotte"=metricTester:::my_PD_Cadotte),#
	nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS)))
.1*16*50
20*16*0.12
library(metricTester)#
#
prefix1 <- Sys.time()#
prefix1 <- gsub(" ", "_", prefix1)#
prefix1 <- gsub("[:]", "", prefix1)#
prefix2 <- sample(round(runif(100, 1, 100)), size=1)#
prefixBoth <- paste(prefix1, prefix2, sep="_")
?metricsNnulls
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm, randomizations=3, cores=20, cluster=FALSE)
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm, randomizations=3, cores=1, cluster=FALSE)
50*0.7*16
50*0.07*16
50*0.2*16
50*0.08*20
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL,#
		cores=1, cluster=TRUE, randomizations=randomizations, metrics=NULL, nulls=NULL)
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL,#
		cores=1, cluster=TRUE, randomizations=randomizations, metrics=NULL, nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS))
dim(cdm)
lat <- rnorm(50)
long <- rnorm(50)
temp <- data.frame(lat,long)
dists <- dist(temp)
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL, distances.among=dists,#
		cores=1, cluster=TRUE, randomizations=randomizations, metrics=NULL, nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS))
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL, distances.among=dists,#
		cores=1, cluster=TRUE, randomizations=3, metrics=NULL, nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS))
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL, distances.among=dists,#
		cores=16, cluster=TRUE, randomizations=3, metrics=NULL, nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS))
metricsNnulls(tree=tree, #
		picante.cdm=cdm, regional.abundance=NULL, distances.among=dists,#
		cores=100, cluster=TRUE, randomizations=3, metrics=NULL, nulls=list("twoX"=metricTester:::my_2x, "threeX"=metricTester:::my_3x, "oneS"=metricTester:::my_1s,#
	"regional"=metricTester:::my_regional, "richness"=metricTester:::my_richnessNull, "frequency"=metricTester:::my_frequency,#
	"independent_swap"=metricTester:::my_IS, "trial_swap"=metricTester:::my_TS))
ls()
50*0.07*32
50*0.07*20
50*0.12*14
50*0.065*32
50*0.065*20
library(metricTester)
ply
plyr
?fitContinuousMCMC
library(geiger)
?fitContinuousMCMC
install.packages("geiger")
library(geiger)
?fitContinuousMCMC
library(geiger)
?fitContinuousMCMC
library(devtools)
load_all()
bounds <- quadratPlacer(no.quadrats=10, arena.length=300, quadrat.length=50)
bounds
apply(bounds[,1:2], 1, mean)
temp <- apply(quadrat.bounds[,1:2], 1, mean)
temp <- apply(bounds[,1:2], 1, mean)
temp
data.frame(temp, temp)
x.centers <- apply(bounds[,1:2], 1, mean)#
	y.centers <- apply(bounds[,3:4], 1, mean)#
	centers <- data.frame(x.center=x.centers, y.center=y.centers)
centers
load_all()
bounds <- quadratPlacer(no.quadrats=10, arena.length=300, quadrat.length=50)
bounds
load_all()
load_all()
bounds <- quadratPlacer(no.quadrats=10, arena.length=300, quadrat.length=50)
bounds
?multiCDM
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
prepped <- prepSimulations(tree, arena.length=300, mean.log.individuals=2,#
	length.parameter=1000, sd.parameter=50, max.distance=20, proportion.killed=0.2,#
	competition.iterations=5)#
#
#run the spatial simulations#
arenas <- runSimulations(prepped)
cdms <- multiCDM(arenas, no.quadrats=10, quadrat.length=20)
str(arenas)
load_all()
cdms <- multiCDM(arenas, no.quadrats=10, quadrat.length=20)
?makeCDM
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
#prep the data for the simulation#
prepped <- prepSimulations(tree, arena.length=300, mean.log.individuals=2,#
length.parameter=5000, sd.parameter=50, max.distance=20, proportion.killed=0.2,#
competition.iterations=3)#
#
competition <- competitionArena(prepped)#
#
test <- makeCDM(competition, 15, 30)
temp <- quadratPlacer(15, max(competition$dims), 30)
temp
load_all()
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
#prep the data for the simulation#
prepped <- prepSimulations(tree, arena.length=300, mean.log.individuals=2,#
length.parameter=5000, sd.parameter=50, max.distance=20, proportion.killed=0.2,#
competition.iterations=3)#
#
competition <- competitionArena(prepped)#
#
test <- makeCDM(competition, 15, 30)
test
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
prepped <- prepSimulations(tree, arena.length=300, mean.log.individuals=2,#
	length.parameter=1000, sd.parameter=50, max.distance=20, proportion.killed=0.2,#
	competition.iterations=5)#
#
#run the spatial simulations#
arenas <- runSimulations(prepped)#
#
#derive CDMs. quadrats are placed in the same places across all spatial simulations#
cdms <- multiCDM(arenas, no.quadrats=10, quadrat.length=20)
cdms
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
prepped <- prepSimulations(tree, arena.length=300, mean.log.individuals=2,#
	length.parameter=1000, sd.parameter=50, max.distance=20, proportion.killed=0.2,#
	competition.iterations=5)#
#
#run the spatial simulations#
arenas <- runSimulations(prepped)#
#
#derive CDMs. quadrats are placed in the same places across all spatial simulations#
cdms <- multiCDM(arenas, no.quadrats=10, quadrat.length=20)
cdms
load_all()
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
prepped <- prepSimulations(tree, arena.length=300, mean.log.individuals=2,#
	length.parameter=1000, sd.parameter=50, max.distance=20, proportion.killed=0.2,#
	competition.iterations=5)#
#
#run the spatial simulations#
arenas <- runSimulations(prepped)#
#
#derive CDMs. quadrats are placed in the same places across all spatial simulations#
cdms <- multiCDM(arenas, no.quadrats=10, quadrat.length=20)
cdms
load_all()
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)
prepped <- prepSimulations(tree=tree, arena.length=300, mean.log.individuals=2, length.parameter=5000, #
		sd.parameter=50, max.distance=30, proportion.killed=0.2, competition.iterations=2)
arenas <- runSimulations(prepped, simulations)
simulations <- NULL
arenas <- runSimulations(prepped, simulations)
cdms <- multiCDM(arenas, no.quadrats=15, quadrat.length=30)
cdms
observed <- lapply(cdms, function(x) observedMetrics(tree=tree, picante.cdm=x, metrics))
observed <- lapply(cdms, function(x) observedMetrics(tree=tree, picante.cdm=x$cdm, metrics))
nulls <- NULL
metrics <- NULL
observed <- lapply(cdms, function(x) observedMetrics(tree=tree, picante.cdm=x$cdm, metrics))
observed
allRandomizations <- lapply(1:length(cdms), function(x) metricsNnulls(tree=tree, #
		picante.cdm=cdms[[x]]$cdm, regional.abundance=arenas[[x]]$regional.abundance,#
		cores=cores, cluster, randomizations=randomizations, metrics, nulls=nulls))
centers
dist(centers)
load_all()
cdms <- multiCDM(arenas, no.quadrats=15, quadrat.length=30)
cdms
observed <- lapply(cdms, function(x) observedMetrics(tree=tree, picante.cdm=x$cdm, metrics))
observed
allRandomizations <- lapply(1:length(cdms), function(x) metricsNnulls(tree=tree, #
		picante.cdm=cdms[[x]]$cdm, regional.abundance=arenas[[x]]$regional.abundance,#
		distances.among=arenas[[x]]$dists, cores=3, cluster=FALSE, #
		randomizations=3, metrics, nulls=nulls))
?metricsNnulls
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
rawResults <- metricsNnulls(tree, cdm, randomizations=3, cores=1, cluster=FALSE)
cdm
cdms
rawResults <- metricsNnulls(tree=tree, picante.cdm=cdms$competition$cdm, distances.among=cdms$competition$dists, randomizations=3, cores=1, cluster=FALSE)
prepNulls(tree=tree, picante.cdm=cdms$competition$cdm, distances.among=cdms$competition$dists)
cdms$competition$dists
rawResults <- metricsNnulls(tree=tree, picante.cdm=cdms$competition$cdm, distances.among=cdms$competition$dists, randomizations=3, cores=1, cluster=FALSE)
load_all()
test <- makeCDM(competition, 15, 30)
test
load_all()
?quadratContents
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
temp <- evolveTraits(tree)#
#
phydistmatrix <- cophenetic(temp[[1]])#
#
#define a color for each species#
cols <- blue2green2red(nrow(phydistmatrix))#
#
#prep the data for the simulation#
prepped <- prepSimulations(tree, arena.length=300, mean.log.individuals=2,#
length.parameter=5000, sd.parameter=50, max.distance=20, proportion.killed=0.2,#
competition.iterations=3)#
#
singleArena <- filteringArena(prepped)
load_all()
?quadratContents
document()
?quadratContents
?quadratContents
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
temp <- evolveTraits(tree)#
#
phydistmatrix <- cophenetic(temp[[1]])#
#
#define a color for each species#
cols <- blue2green2red(nrow(phydistmatrix))#
#
#prep the data for the simulation#
prepped <- prepSimulations(tree, arena.length=300, mean.log.individuals=2,#
length.parameter=5000, sd.parameter=50, max.distance=20, proportion.killed=0.2,#
competition.iterations=3)#
#
singleArena <- filteringArena(prepped)#
#
#plot the arena. don't close the window#
plot(singleArena$arena$X, singleArena$arena$Y, pch=20, cex=0.5, xlim=c(0,300),#
	ylim=c(0,300), col=cols[singleArena$arena$individuals])#
#
boundResults <- quadratPlacer(no.quadrats=10, arena.length=300, quadrat.length=50)
boundResults
cdm <- quadratContents(singleArena$arena, boundResults)
cdm
load_all()
bounds <- quadratPlacer(no.quadrats=10, arena.length=300,#
quadrat.length=50)$quadrat.bounds
bounds
bounds <- quadratPlacer(no.quadrats=10, arena.length=300,#
quadrat.length=50)
bounds
