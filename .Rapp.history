`
testing
testing next
install.packages(c("geiger","phytools","picante","dply","vegan","geometry","FD"), dependencies=TRUE)
install.packages("dplyr", dependencies=T)
install.packages("devtools", dependencies=T)
library(devtools)
install_github("metricTester",username="eliotmiller")
install_github("ecoPDcorr",username="eliotmiller")
install_github("metricTester",username="eliotmiller")
library(metricTester)
filteringLooper
allMetricsNull
?filteringLooper
system.time(library(ape)#
library(geiger)#
library(colorRamps)#
library(plyr)#
library(picante)#
#
filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="richness", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=1, temp.file="deleteme.csv",#
output.file="confused.csv"))
library(ape)#
library(geiger)#
library(colorRamps)#
library(plyr)#
library(picante)
filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="richness", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=1, temp.file="deleteme.csv",#
output.file="confused.csv")
system.time(filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="richness", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=1, temp.file="deleteme.csv",#
output.file="confused.csv"))
fix(randomizeMatrix)
fix(allMetricsNull)
system.time(filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="richness", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=1, temp.file="deleteme.csv",#
output.file="confused.csv"))
system.time(filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="independent.swap", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=1, temp.file="deleteme.csv",#
output.file="confused.csv"))
system.time(filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="independentswap", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=1, temp.file="deleteme.csv",#
output.file="confused.csv"))
allMetricsNull
fix(allMetricsNull)
system.time(filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="independentswap", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=1, temp.file="deleteme.csv",#
output.file="confused.csv"))
fix(allMetricsNull)
system.time(filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="independentswap", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=1, temp.file="deleteme.csv",#
output.file="confused.csv"))
?simulateComm
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1))#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)
head(cdm)
test <- randomizeMatrix(cdm, "independentswap")
system.time(test <- randomizeMatrix(cdm, "independentswap"))
system.time(test <- randomizeMatrix(cdm, "independentswap", iterations=1000000))
system.time(test <- randomizeMatrix(cdm, "trialswap", iterations=1000000))
system.time(test <- randomizeMatrix(cdm, "trialswap", iterations=10))
for(i in 1:4)
fileName <- paste("name",i)
for(i in 1:4)
fileName <- paste("name",i)
for(i in 1:4)#
{#
	fileName <- paste("name",i)#
	print(fileName)#
}
?filteringLooper
filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="richness", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=3, temp.file="deleteme.csv",#
output.file="confused.csv")
test <- phyloNtraits(50)
test[[1]]
plot(test[[1]])
test <- phyloNtraits(50)
plot(test[[1]])
test <- phyloNtraits(50)
plot(test[[1]])
sigTest
summaries
?summaries
library(metricTester)
?summaries
library(plyr)#
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1))#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
system.time(allMetricsNull(tree=tree, orig.matrix=cdm, null.method="richness", no.randomizations=10, temp.file="output.csv"))#
#
possibilities <- read.csv("output.csv")
expectations <- ddply(possibilities, .(richness), summaries)
expectations
filteringLooper
head(expectations)
expectations <- ddply(possibilities, .(quadratNames), summaries)
head(expectations)
?allMetrics
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1))#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
results <- allMetrics(tree, cdm)
head(results)
sigTest
head(expectations)
summaries <- function(null.output)#
{#
    # Create the output variable names#
	metricNames <- names(null.output)[names(null.output)!="richness" & names(null.output)!="quadratNames"]#
	summary.names <- c("average", "sd", "lower", "upper")#
	combo.names <- paste(rep(metricNames, each = length(summary.names)), rep(summary.names, length(metricNames)), sep = ".")#
#
	# Write a confidence interval function to be able to each variable#
	CI <- function(x)#
	{#
		c(mean(x, na.rm = TRUE), sd(x, na.rm=TRUE), quantile(x, c(0.025, 0.975), na.rm = TRUE))#
	}#
#
	# Convert the numeric part of the data frame to matrix#
    # and then apply the function g to each column#
    L <- apply(data.matrix(null.output[, metricNames]), 2, CI)#
    # String the matrix in column order to a vector (that means basically run through the whole matrix creating a long vector as you go)#
    # add combo names to it, then return. #
    v <- as.vector(L)#
    names(v) <- combo.names#
    return(v)#
}
expectations <- ddply(possibilities, .(quadratNames), summaries)
head(expectations)
?filteringLooper
filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="richness", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=3, temp.file="deleteme.csv",#
output.file="confused.csv")
library(ape)#
library(geiger)#
library(colorRamps)#
library(plyr)#
library(picante)#
#
filteringLooper(no.species=50, x.min=0, x.max=300, y.min=0, y.max=300, no.quadrats=15,#
quadrat_size=50, mean.log.individuals=4, length.parameter=5000, sd.parameter=50,#
null.method="richness", concatBYrichness=TRUE, no.randomizations=2, expectation=1,#
wrong=2, no.metrics=19, iterations=3, temp.file="deleteme.csv",#
output.file="confused.csv")
summaries
?sigTest
library(plyr)#
library(geiger)#
library(picante)#
#
#simulate tree with birth-death process#
tree <- sim.bdtree(b=0.1, d=0, stop="taxa", n=50)#
#
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1))#
#
cdm <- simulateComm(tree, min.rich=10, max.rich=25, abundances=sim.abundances)#
#
system.time(allMetricsNull(tree=tree, orig.matrix=cdm, null.method="richness", no.randomizations=10, temp.file="output.csv"))#
#
possibilities <- read.csv("output.csv")#
#
#call the summaries function from within a ddply statement#
expectations <- ddply(possibilities, .(richness), summaries)#
#
#calculate the observed metrics#
observed <- allMetrics(tree, cdm)#
#
#important merge command, confirm it works#
results <- merge(observed, expectations, sort=FALSE)
head(results)
oneMetric <- sigTest(results, "PSV")
oneMetric
metric.names <- names(observed)[3:21]#
#
sig.results <- list()#
#
for(i in 1:length(metric.names))#
{#
	sig.results[[i]] <- sigTest(results, metric.names[i])#
}#
#
sig.results <- as.data.frame(sig.results)#
#
names(sig.results) <- metric.names
sig.results
Mean
mean
sd
SD
ses.mpd
?ses.mpd
head(results)
observed <- allMetrics(tree, cdm)#
#
#important merge command, confirm it works#
results <- merge(observed, expectations, sort=FALSE)
head(results)
oneMetric <- sigTest(results, "PSV")
oneMetric
ses
head(results)
results[,"PSV.average"]
results[,"PSV.sd"]
results[,"PSV.average"]->average
results[,"PSV.sd"]->SD
SD
average
average-SD
observed
results[,"PSV"]->observed
observed
ses <-
ses
ses <- (observed-average)/sd
ses <- (observed-average)/SD
ses
oneMetric
plot(ses,oneMetric)
library(devtools)
load_all()
document()
