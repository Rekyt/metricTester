sums
indiv.list <- lapply(sums, sample, x=regional.abundance)
indiv.list
count(indiv.list)
lapply(indiv.list, count)
lapply(indiv.list, count)->temp
dim(temp)
length(temp)
dim(temp)[[1]]
temp[[1]]
length(temp[[1]])
dim(temp[[1]])
quadrat.richness
dim(temp[[2]])
lapply(temp, dim)
indiv.list <- lapply(sums, sample, x=regional.abundance)
temp <- lapply(indiv.list, count)
lapply(temp, dim)
indiv.list <- lapply(sums, sample, x=regional.abundance)
temp <- lapply(indiv.list, count)
lapply(temp, dim)
indiv.list <- lapply(sums, sample, x=regional.abundance)
indiv.list
length(quadrat.richness)
length(sum)
length(sums)
plotIDs <- rep("quadrat", 1:length(sums), sep="")
plotIDs <- rep("quadrat", 1:15, sep="")
plotIDs <- rep(paste("quadrat", 1:length(sums), sep=""), length(indiv.list))
plotIDs
15*15
names(indiv.list)
dimnames(indiv.list)
names(indiv.list)
names(indiv.list) <- paste("quadrat",1:15,sep="")
indiv.list
names(indiv.list[[1]])
indiv.list[[1]]
names(indiv.list)
names(indiv.list[1])
quick.function <- function(x)#
{#
	output <- rep(names(x), length(x))#
	return(output)#
}
quick.function(indiv.list)
lapply(indiv.list, quick.function)
indiv.list <- lapply(sums, sample, x=regional.abundance)
indiv.list
sums
paste("quadrat", 1:length(sums)
)
paste("quadrat", 1:length(sums), sep="")
paste(paste("quadrat", 1:length(sums), sep=""), length(indiv.list))
paste(paste("quadrat", 1:length(sums), sep=""), indiv.list)
rep(paste("quadrat", 1:length(sums), sep=""), length(indiv.list))
indiv.list
test <- paste("quadrat", 1:length(sums), sep="")
test
rep(test, 1,2)
rep(test, c(1,2))
rep(test, sums)
rep(paste("quadrat", 1:length(sums), sep=""), sums)
sums
sum(sums)
plotIDs <- rep(paste("quadrat", 1:length(sums), sep=""), sums)
count(plotIDs)
sums
temp.df <- data.frame(plotIDs, indiv.list)
indiv.list <- lapply(sums, sample, x=regional.abundance)
indiv.list
sums
indiv.list <- unlist(indiv.list)
indiv.list
temp.df <- data.frame(plotIDs, indiv.list)
temp.df
abund
temp.df <- data.frame(plotIDs, abund=rep(1, length(indiv.list), indiv.list)
temp.df <- data.frame(plotIDs, abund=rep(1, length(indiv.list)), indiv.list)
temp.df
sample2matrix(temp.df)
temp.df[temp.df$plotIDs=="quadrat1",]
unique(plotIDs)
cdm
new.cdm
new.cdm <- sample2matrix(temp.df)
new.cdm
new.cdm[unique(plotIDs),]
new.cdm <- new.cdm[unique(plotIDs),]
new.cdm
new.cdm[,tree$tip.label]
new.cdm[,as.factor(tree$tip.label)]
new.cdm[names(cdm)[tree$tip.label],]
new.cdm[,names(cdm)[tree$tip.label]]
new.cdm[,names(new.cdm)[tree$tip.label]]
names(new.cdm)
names(new.cdm)[tree$tip.label]
names(new.cdm)[as.factor(tree$tip.label)]
length(tree$tip.label)
dim(new.cdm)
new.cdm
cbind(new.cdm,rep(0,15))
setdiff(names(new.cdm),tree$tip.label)
setdiff(names(new.cdm),tree$tip.label)->test
length(test)
setdiff(tree$tip.label, names(new.cdm))
not.found <- setdiff(tree$tip.label, names(new.cdm))
not.found > 0
length(test)
length(not.found)
new.cdm
to.bind
dim(new.cdm)
dim(new.cdm)[[1]]
to.bind <- matrix(nrow=dim(new.cdm)[[1]], ncol=length(not.found), 0)
to.bind
names(to.bind)
names(to.bind) <- not.found
to.bind
to.bind <- matrix(nrow=dim(new.cdm)[[1]], ncol=length(not.found), 0)
to.bind
dimnames(to.bind)
colnames(to.bind)
colnames(to.bind) <- not.found
to.bind
new.cdm <- cbind(new.cdm, to.bind)
new.cdm
names(new.cdm)
setdiff(names(new.cdm),tree$tip.label)
setdiff(tree$tip.label,names(new.cdm))
names(new.cdm)[tree$tip.label]
names(new.cdm)[as.factor(tree$tip.label)]
tree$tip.label
as.factor(tree$tip.label)
class(names(new.cdm))
names(new.cdm)[tree$tip.label,]
names(new.cdm)[tree$tip.label]
as.factor(names(new.cdm))[tree$tip.label]
as.factor(names(new.cdm))[as.factor(tree$tip.label)]
names(new.cdm)
names(new.cdm)[order(tree$tip.label)]
order(names(new.cdm), tree$tip.label)
names(new.cdm)
names(new.cdm)[tree$tip.label,]
names(new.cdm)[,tree$tip.label]
names(new.cdm)[tree$tip.label]
names(new.cdm) %in% tree$tip.label
names(new.cdm)[as.factor(tree$tip.label)]
names(new.cdm)[as.factor(tree$tip.label),]
names(new.cdm)[as.factor(tree$tip.label)]
new.cdm[tree$tip.label,]
new.cdm[,tree$tip.label]
new.cdm <- new.cdm[,tree$tip.label]
new.cdm
apply(new.cdm, 1, lengthNonZeros)
apply(new.cdm, 2, sums)
apply(new.cdm, 2, sum)
count(regional.abundance)
regionalNull <- function(cdm, tree, regional.abundance)#
{#
	#find the total number of individuals in each quadrat#
	sums <- apply(cdm, 1, sum)#
#
	#this command works beautifully, lucky guess on how to write it. it ends up sampling#
	#the required number of individuals (the sum of all individuals in a quadrat) #
	#where each species gets drawn with a probability proportional to its abundance#
	#in the regional abundance vector. this does not strictly maintain species richness#
	#but it approximates it, and by concatenating by richness at end, we get same result#
	indiv.list <- lapply(sums, sample, x=regional.abundance)#
	#unlisting the list here will generate one long vector of individuals#
	indiv.list <- unlist(indiv.list)#
#
	#generate a vector of plot IDs, where each plot ID gets repeated the number of indivs#
	#in that plot. end up us#
	plotIDs <- rep(paste("quadrat", 1:length(sums), sep=""), sums)#
	#create a dummy phylocom style dataframe#
	temp.df <- data.frame(plotIDs, abund=rep(1, length(indiv.list)), indiv.list)#
	#use picante's sample to matrix function to turn this into an appropriate cdm#
	#picante sums individuals that occur multiple times in a given quadrat#
	new.cdm <- sample2matrix(temp.df)#
	#sort the cdm into quadrat order#
	new.cdm <- new.cdm[unique(plotIDs),]#
	#add columns for species that weren't recorded in any quadrats#
	not.found <- setdiff(tree$tip.label, names(new.cdm))#
	if(length(not.found > 0))#
	{#
		to.bind <- matrix(nrow=dim(new.cdm)[[1]], ncol=length(not.found), 0)#
		colnames(to.bind) <- not.found#
		new.cdm <- cbind(new.cdm, to.bind)#
	}#
	else#
	{#
		new.cdm <- new.cdm#
	}#
#
	#sort the cdm into phylogenetic order#
	new.cdm <- new.cdm[,tree$tip.label]#
	return(new.cdm)#
}
ls()
rm(arena, bounds, cdm, i, indiv.list, new.cdm, not.found, plotIDs, quadrat.richness, quick.function, regional.abundance, regionalNull, sums, temp, temp.cdm, temp.df, temp2, test, to.bind, total.occs, tree)
ls()
tree2 <- sim.bdtree(stop="taxa", n=50)#
#
arena2 <- randomArena(tree2, 0, 300, 0, 300, 3.2)#
#
bounds2 <- quadratPlacer(15, 300, 300, 30)#
#
temp.cdm2 <- quadratContents(arena2$arena, bounds2)#
#
cdm2 <- t(temp.cdm2)
cdm2
arena2$regional.abundance
regionalNull()
regionalNull <- function(cdm, tree, regional.abundance)#
{#
	#find the total number of individuals in each quadrat#
	sums <- apply(cdm, 1, sum)#
#
	#this command works beautifully, lucky guess on how to write it. it ends up sampling#
	#the required number of individuals (the sum of all individuals in a quadrat) #
	#where each species gets drawn with a probability proportional to its abundance#
	#in the regional abundance vector. this does not strictly maintain species richness#
	#but it approximates it, and by concatenating by richness at end, we get same result#
	indiv.list <- lapply(sums, sample, x=regional.abundance)#
	#unlisting the list here will generate one long vector of individuals#
	indiv.list <- unlist(indiv.list)#
#
	#generate a vector of plot IDs, where each plot ID gets repeated the number of indivs#
	#in that plot. end up us#
	plotIDs <- rep(paste("quadrat", 1:length(sums), sep=""), sums)#
	#create a dummy phylocom style dataframe (col1=quadratID, 2=abund, 3=spID)#
	temp.df <- data.frame(plotIDs, abund=rep(1, length(indiv.list)), indiv.list)#
	#use picante's sample to matrix function to turn this into an appropriate cdm#
	#picante sums individuals that occur multiple times in a given quadrat#
	new.cdm <- sample2matrix(temp.df)#
	#sort the cdm into quadrat order#
	new.cdm <- new.cdm[unique(plotIDs),]#
	#add columns for species that weren't recorded in any quadrats#
	not.found <- setdiff(tree$tip.label, names(new.cdm))#
	if(length(not.found > 0))#
	{#
		to.bind <- matrix(nrow=dim(new.cdm)[[1]], ncol=length(not.found), 0)#
		colnames(to.bind) <- not.found#
		new.cdm <- cbind(new.cdm, to.bind)#
	}#
	else#
	{#
		new.cdm <- new.cdm#
	}#
#
	#sort the cdm into phylogenetic order#
	new.cdm <- new.cdm[,tree$tip.label]#
	return(new.cdm)#
}
regionalNull(cdm=cdm2, tree=tree2, regional.abundance=arena2$regional.abundance)->test
test
cdm2
apply(cdm2, 2, sum)
count(arena2$regional.abundance)
apply(test, 2, sum)
library(devtools)
library(roxygen3)
load_all()
load_all()
load_all()
document()
tree2 <- sim.bdtree(stop="taxa", n=50)#
#
arena2 <- randomArena(tree2, 0, 300, 0, 300, 3.2)#
#
bounds2 <- quadratPlacer(15, 300, 300, 30)#
#
temp.cdm2 <- quadratContents(arena2$arena, bounds2)#
#
cdm2 <- t(temp.cdm2)
singleMetricNull(tree=tree2, orig.matrix=cdm2, metric="mpd", null.method="richness", no.randomizations=100, temp.file="deleteme.csv")
cdm2
rownames(cdm2)
rownames(cdm2) <- paste("quadrat",1:15,sep="")
cdm2
singleMetricNull(tree=tree2, orig.matrix=cdm2, metric="mpd", null.method="richness", no.randomizations=100, temp.file="deleteme.csv")
singleMetricNull(tree=tree2, orig.matrix=cdm2, metric="mpd", null.method="regionalNull", no.randomizations=100, temp.file="deleteme.csv")
document()
singleMetricNull(tree=tree2, orig.matrix=cdm2, metric="mpd", null.method="regionalNull", no.randomizations=100, temp.file="deleteme.csv")
singleMetricNull(tree=tree2, orig.matrix=cdm2, metric="mpd", null.method="regionalNull", no.randomizations=100, regional.abundance=arena2$regional.abundance, temp.file="deleteme.csv")
document()
singleMetricNull(tree=tree2, orig.matrix=cdm2, metric="mpd", null.method="regionalNull", no.randomizations=100, regional.abundance=arena2$regional.abundance, temp.file="deleteme.csv")
new.arena <- competitionSimulator(tree, arena2, 15, 0.2, 100)
new.arena <- competitionSimulator(tree2, arena2, 15, 0.2, 100)
new.arena$related
length(new.arena$related)
iterations
iterations <- 1:101
plot(new.arena$related~iterations)
dists <- cophentic(tree2)
dists <- cophenetic(tree2)
obs.cdm <- quadratContents(new.arena$arena, bounds2)
obs.cdm
obs.cdm <- t(obs.cdm)
obs.cdm
rownames(obs.cdm) <- paste("quadrat",1:15,sep="")
obs.cdm
mpds <- mpd(obs.cdm, dists)
document()
system.time(singleMetricNull(tree=tree2, orig.matrix=obs.cdm, metric="mpd", null.method="richness", no.randomizations=1000, regional.abundance=arena2$regional.abundance, "richness.csv"))
system.time(singleMetricNull(tree=tree2, orig.matrix=obs.cdm, metric="mpd", null.method="independentswap", no.randomizations=1000, regional.abundance=arena2$regional.abundance, "IS.csv"))
system.time(singleMetricNull(tree=tree2, orig.matrix=obs.cdm, metric="mpd", null.method="regionalNull", no.randomizations=1000, regional.abundance=arena2$regional.abundance, "RN.csv"))
library(plyr)
rich.possibilities <- read.csv("richness.csv")#
#
#' #call the summaries function from within a ddply statement#
expectations <- ddply(rich.possibilities, .(richness), summaries)
expectations
rich.possibilities <- read.csv("richness.csv")#
#
#' #call the summaries function from within a ddply statement#
rich.expectations <- ddply(rich.possibilities, .(richness), summaries)
rm(expectations)
rich.expectations
mpds
richs
richs <- apply(obs.cdm, 1, lengthNonZeros)
obs.cdm
richs
IS.possibilities <- read.csv("IS.csv")#
#
#' #call the summaries function from within a ddply statement#
IS.expectations <- ddply(IS.possibilities, .(richness), summaries)
IS.expectations
RN.possibilities <- read.csv("RN.csv")#
#
#' #call the summaries function from within a ddply statement#
RN.expectations <- ddply(RN.possibilities, .(richness), summaries)
RN.expectations
plot(rich.expectations$upper~rich.expectations$richness, ylim=c(4.8,6), pch=20, col="gray80", cex=2)
plot(rich.expectations$result.upper~rich.expectations$richness, ylim=c(4.8,6), pch=20, col="gray80", cex=2)
points(rich.expectations$result.lower~rich.expectations$richness, pch=20, col="gray80", cex=2)
points(mpds~richs, pch=20, col="orange", cex=2)
plot(IS.expectations$result.upper~IS.expectations$richness, ylim=c(4.8,6), pch=20, col="gray80", cex=2)
plot(rich.expectations$result.upper~rich.expectations$richness, ylim=c(4.8,6.12), pch=20, col="gray80", cex=2)
points(rich.expectations$result.lower~rich.expectations$richness, pch=20, col="gray80", cex=2)
points(mpds~richs, pch=20, col="orange", cex=2)
plot(IS.expectations$result.upper~IS.expectations$richness, ylim=c(4.8,6.12), pch=20, col="gray80", cex=2)
plot(IS.expectations$result.upper~IS.expectations$richness, ylim=c(4.8,6.12), pch=20, col="gray80", cex=2)
points(IS.expectations$result.lower~IS.expectations$richness, pch=20, col="gray80", cex=2)
points(mpds~richs, pch=20, col="orange", cex=2)
plot(IS.expectations$result.upper~IS.expectations$richness, ylim=c(4.8,6.12), pch=20, col="gray80", cex=2)
plot(RN.expectations$result.upper~RN.expectations$richness, ylim=c(4.8,6.12), xlim=c(9,21), pch=20, col="gray80", cex=2)
points(RN.expectations$result.lower~RN.expectations$richness, xlim=c(9,21), pch=20, col="gray80", cex=2)
points(mpds~richs, col="orange", cex=2)
plot(RN.expectations$result.upper~RN.expectations$richness, ylim=c(4.8,6.12), xlim=c(9,21), pch=20, col="gray80", cex=2)
points(RN.expectations$result.lower~RN.expectations$richness, xlim=c(9,21), pch=20, col="gray80", cex=2)
points(mpds~richs, col="orange", cex=2, pch=20)
system.time(singleMetricNull(tree=tree2, orig.matrix=obs.cdm, metric="mpd", null.method="regionalNull", no.randomizations=10000, regional.abundance=arena2$regional.abundance, "RN.csv"))
RN.possibilities <- read.csv("RN.csv")#
#
#' #call the summaries function from within a ddply statement#
RN.expectations <- ddply(RN.possibilities, .(richness), summaries)
plot(RN.expectations$result.upper~RN.expectations$richness, ylim=c(4.8,6.12), xlim=c(9,21), pch=20, col="gray80", cex=2)
points(RN.expectations$result.lower~RN.expectations$richness, xlim=c(9,21), pch=20, col="gray80", cex=2)
points(mpds~richs, col="orange", cex=2, pch=20)
plot(RN.expectations$result.upper~RN.expectations$richness, ylim=c(4.8,6.12), xlim=c(9,21), pch=20, col="gray80", cex=2)
points(RN.expectations$result.lower~RN.expectations$richness, xlim=c(9,21), pch=20, col="gray80", cex=2)
points(mpds~richs, col="orange", cex=2, pch=20)
